{
	"version": "https://jsonfeed.org/version/1",
	"title": "Random Notes",
	"icon": "https://micro.blog/otaviocc/avatar.jpg",
	"home_page_url": "https://otavio.cc/",
	"feed_url": "https://otavio.cc/feed.json",
	"items": [
		
			{
				"id": "http://otaviocc.micro.blog/2022/04/22/i-pay-around.html",
				
				"content_html": "<p>I pay around 60 EUR/year to my bank for ‚Äúmaintenance‚Äù and they can‚Äôt event connect both my debit and credit card to Apple Pay. It‚Äôs either/or ü§¶‚Äç‚ôÇÔ∏è</p>\n",
				"content_text": "I pay around 60 EUR/year to my bank for ‚Äúmaintenance‚Äù and they can‚Äôt event connect both my debit and credit card to Apple Pay. It‚Äôs either/or ü§¶‚Äç‚ôÇÔ∏è\n",
				"date_published": "2022-04-22T13:25:23+02:00",
				"url": "https://otavio.cc/2022/04/22/i-pay-around.html"
			},
			{
				"id": "http://otaviocc.micro.blog/2022/04/22/i-prefer-shooting.html",
				
				"content_html": "<p>üì∑ I prefer shooting with my FUJI camera, but I&rsquo;m always impressed by what&rsquo;s possible to do with a phone these days. I took this photo with an old iPhone Xs with an app called <a href=\"https://obscura.camera/\">Obscura 3</a>. The photo was taken in black and white, and this photo is straight out of camera (SOOC).</p>\n<!-- raw HTML omitted -->\n",
				"content_text": "üì∑ I prefer shooting with my FUJI camera, but I'm always impressed by what's possible to do with a phone these days. I took this photo with an old iPhone Xs with an app called [Obscura 3](https://obscura.camera/). The photo was taken in black and white, and this photo is straight out of camera (SOOC).\n\n<img src=\"uploads/2022/a9537c7098.jpg\" width=\"600\" height=\"400\" alt=\"\" />\n",
				"date_published": "2022-04-22T00:07:47+02:00",
				"url": "https://otavio.cc/2022/04/22/i-prefer-shooting.html",
				"tags": ["photography"]
			},
			{
				"id": "http://otaviocc.micro.blog/2022/04/21/i-wish-there.html",
				
				"content_html": "<p>I wish there was more people using <a href=\"https://threema.ch/en\">Threema</a> üí¨</p>\n",
				"content_text": "I wish there was more people using [Threema](https://threema.ch/en) üí¨ \n",
				"date_published": "2022-04-21T12:59:48+02:00",
				"url": "https://otavio.cc/2022/04/21/i-wish-there.html",
				"tags": ["internet"]
			},
			{
				"id": "http://otaviocc.micro.blog/2022/04/20/yesterday-i-made.html",
				
				"content_html": "<p>Yesterday I made a list of internet services I don‚Äôt use and closed them. Fifteen websites I no longer have to worry about.</p>\n",
				"content_text": "Yesterday I made a list of internet services I don‚Äôt use and closed them. Fifteen websites I no longer have to worry about.\n",
				"date_published": "2022-04-20T12:33:38+02:00",
				"url": "https://otavio.cc/2022/04/20/yesterday-i-made.html",
				"tags": ["internet"]
			},
			{
				"id": "http://otaviocc.micro.blog/2022/04/19/unfortunately-i-still.html",
				
				"content_html": "<p>Unfortunately I still need Twitter for a couple of things. Two services I use in Germany offer support via DM. If you email them, it takes more than a week to get a reply. If you DM them, it takes 10 minutes.</p>\n",
				"content_text": "Unfortunately I still need Twitter for a couple of things. Two services I use in Germany offer support via DM. If you email them, it takes more than a week to get a reply. If you DM them, it takes 10 minutes.\n",
				"date_published": "2022-04-19T13:59:02+02:00",
				"url": "https://otavio.cc/2022/04/19/unfortunately-i-still.html"
			},
			{
				"id": "http://otaviocc.micro.blog/2022/04/19/to-delete-the.html",
				
				"content_html": "<p>To delete the 8000+ remaining tweets I‚Äôve used <a href=\"https://tweetdelete.net/\">TweetDelete</a> (Premium). Basically you upload your Twitter archive and the service uses the tweet IDs to delete old tweets that aren‚Äôt available in the timeline API.</p>\n",
				"content_text": "To delete the 8000+ remaining tweets I‚Äôve used [TweetDelete](https://tweetdelete.net/) (Premium). Basically you upload your Twitter archive and the service uses the tweet IDs to delete old tweets that aren‚Äôt available in the timeline API.\n",
				"date_published": "2022-04-19T13:56:13+02:00",
				"url": "https://otavio.cc/2022/04/19/to-delete-the.html"
			},
			{
				"id": "http://otaviocc.micro.blog/2022/04/18/elon-musk-demonstrates.html",
				
				"content_html": "<p><a href=\"https://www.techdirt.com/2022/04/15/elon-musk-demonstrates-how-little-he-understands-about-content-moderation/\">Elon Musk demonstrates how little he understands about content moderation</a></p>\n<blockquote>\n<p>humans are complex and ever-changing. And content moderation on a platform like Twitter is about recognizing that complexity and figuring out ways to deal with it.</p>\n</blockquote>\n<p>I don&rsquo;t get why people worship Musk.</p>\n",
				"content_text": "[Elon Musk demonstrates how little he understands about content moderation](https://www.techdirt.com/2022/04/15/elon-musk-demonstrates-how-little-he-understands-about-content-moderation/)\r\n\r\n> humans are complex and ever-changing. And content moderation on a platform like Twitter is about recognizing that complexity and figuring out ways to deal with it.\r\n\r\nI don't get why people worship Musk.\n",
				"date_published": "2022-04-18T11:52:43+02:00",
				"url": "https://otavio.cc/2022/04/18/elon-musk-demonstrates.html",
				"tags": ["internet"]
			},
			{
				"id": "http://otaviocc.micro.blog/2022/04/18/twitter-boards-poison.html",
				
				"content_html": "<p><a href=\"https://www.pbs.org/newshour/economy/twitter-board-of-directors-adopt-poison-pill-defense-against-musk-takeover-bid\">Twitter board&rsquo;s ‚Äòpoison pill‚Äô defense against Musk takeover bid</a></p>\n<blockquote>\n<p>Mark Cuban, weighed in on Twitter to share his theory that Musk is making his bid to goose the company‚Äôs stock price so he can sell his stake at a profit.</p>\n</blockquote>\n<p>It wouldn&rsquo;t be the first time he does something similar.</p>\n",
				"content_text": "[Twitter board's ‚Äòpoison pill‚Äô defense against Musk takeover bid](https://www.pbs.org/newshour/economy/twitter-board-of-directors-adopt-poison-pill-defense-against-musk-takeover-bid)\r\n\r\n> Mark Cuban, weighed in on Twitter to share his theory that Musk is making his bid to goose the company‚Äôs stock price so he can sell his stake at a profit.\r\n\r\nIt wouldn't be the first time he does something similar. \n",
				"date_published": "2022-04-18T11:40:25+02:00",
				"url": "https://otavio.cc/2022/04/18/twitter-boards-poison.html",
				"tags": ["internet"]
			},
			{
				"id": "http://otaviocc.micro.blog/2022/04/15/a-couple-of.html",
				
				"content_html": "<p>A couple of days ago I started deleting all my tweets. I had 18,000 tweets and managed to delete 10,000 already. My account is November 2007, and Twitter changed a lot since then; is no longer a healthy community it once was. 8,000 more tweets to go!</p>\n",
				"content_text": "A couple of days ago I started deleting all my tweets. I had 18,000 tweets and managed to delete 10,000 already. My account is November 2007, and Twitter changed a lot since then; is no longer a healthy community it once was. 8,000 more tweets to go!\n",
				"date_published": "2022-04-15T13:49:05+02:00",
				"url": "https://otavio.cc/2022/04/15/a-couple-of.html",
				"tags": ["internet"]
			},
			{
				"id": "http://otaviocc.micro.blog/2022/04/09/decided-to-create.html",
				
				"content_html": "<p>Decided to create a page to keep track of the <a href=\"https://otavio.cc/fuji/\">Film Simulations</a> loaded into my camera. I might document my camera settings as well, so that <em>I remember</em> the settings used in case I decide to restore the camera to its default settings üì∑</p>\n",
				"content_text": "Decided to create a page to keep track of the [Film Simulations](https://otavio.cc/fuji/) loaded into my camera. I might document my camera settings as well, so that *I remember* the settings used in case I decide to restore the camera to its default settings üì∑\n",
				"date_published": "2022-04-09T18:04:11+02:00",
				"url": "https://otavio.cc/2022/04/09/decided-to-create.html",
				"tags": ["photography"]
			},
			{
				"id": "http://otaviocc.micro.blog/2022/04/09/proton-and-simplelogin.html",
				
				"content_html": "<p><a href=\"https://protonmail.com/blog/proton-and-simplelogin-join-forces/\">Proton and SimpleLogin are joining forces</a>:</p>\n<blockquote>\n<p>(&hellip;) we‚Äôre happy to announce today that SimpleLogin has joined Proton to help further our shared mission.</p>\n</blockquote>\n<p>ProtonMail was running behind other services, so this is big. I use <a href=\"https://relay.firefox.com\">Mozilla Relay</a> and highly recommend services like this.</p>\n",
				"content_text": "[Proton and SimpleLogin are joining forces](https://protonmail.com/blog/proton-and-simplelogin-join-forces/):\n\n> (...) we‚Äôre happy to announce today that SimpleLogin has joined Proton to help further our shared mission.\n\nProtonMail was running behind other services, so this is big. I use [Mozilla Relay](https://relay.firefox.com) and highly recommend services like this.\n",
				"date_published": "2022-04-09T14:21:29+02:00",
				"url": "https://otavio.cc/2022/04/09/proton-and-simplelogin.html",
				"tags": ["productivity","internet"]
			},
			{
				"id": "http://otaviocc.micro.blog/2022/04/09/its-happening.html",
				
				"content_html": "<p>It‚Äôs happening!</p>\n<!-- raw HTML omitted -->\n",
				"content_text": "It‚Äôs happening!\n\n<img src=\"https://otavio.cc/uploads/2022/84cf2e2302.jpg\" width=\"600\" height=\"399\" alt=\"\" />\n",
				"date_published": "2022-04-09T09:55:03+02:00",
				"url": "https://otavio.cc/2022/04/09/its-happening.html",
				"tags": ["photography"]
			},
			{
				"id": "http://otaviocc.micro.blog/2022/04/06/i-decided-to.html",
				
				"content_html": "<p>I decided to return to <a href=\"http://flic.kr/otaviocc\">Flickr</a>, it&rsquo;s still my favorite platform to share, store, and learn from others. I use <a href=\"https://glass.photo/\">Glass</a> as well, as Instagram alternative.</p>\n",
				"content_text": "I decided to return to [Flickr](http://flic.kr/otaviocc), it's still my favorite platform to share, store, and learn from others. I use [Glass](https://glass.photo/) as well, as Instagram alternative.\n",
				"date_published": "2022-04-06T10:24:12+02:00",
				"url": "https://otavio.cc/2022/04/06/i-decided-to.html",
				"tags": ["photography","internet"]
			},
			{
				"id": "http://otaviocc.micro.blog/2022/04/05/markdown-in-marsedit.html",
				
				"content_html": "<p><a href=\"https://www.manton.org/2020/04/22/markdown-in-marsedit.html\">Markdown in MarsEdit</a> by <a href=\"https://micro.blog/manton\">@manton</a></p>\n<blockquote>\n<p>Here‚Äôs a simple tip for using MarsEdit with Micro.blog. By default, formatting options in MarsEdit such as Bold and Italic map to HTML (&hellip;). You can customize them to use Markdown instead.</p>\n</blockquote>\n<p>Excellent tip on how make ‚åòB and ‚åòI work with Markdown.</p>\n",
				"content_text": " [Markdown in MarsEdit](https://www.manton.org/2020/04/22/markdown-in-marsedit.html) by [@manton](https://micro.blog/manton)\n\n> Here‚Äôs a simple tip for using MarsEdit with Micro.blog. By default, formatting options in MarsEdit such as Bold and Italic map to HTML (...). You can customize them to use Markdown instead.\n\nExcellent tip on how make ‚åòB and ‚åòI work with Markdown.\n",
				"date_published": "2022-04-05T15:56:00+02:00",
				"url": "https://otavio.cc/2022/04/05/markdown-in-marsedit.html",
				"tags": ["productivity","blog"]
			},
			{
				"id": "http://otaviocc.micro.blog/2022/04/05/i-already-know.html",
				
				"content_html": "<p>I already know what I&rsquo;m gonna build next, and my plan is to sell it in the App Store for macOS and <em>maybe</em> for iOS. But I believe macOS users need it more than iOS users. I&rsquo;m excited üë®‚Äçüíª</p>\n",
				"content_text": "I already know what I'm gonna build next, and my plan is to sell it in the App Store for macOS and *maybe* for iOS. But I believe macOS users need it more than iOS users. I'm excited üë®‚Äçüíª\n",
				"date_published": "2022-04-05T15:46:36+02:00",
				"url": "https://otavio.cc/2022/04/05/i-already-know.html",
				"tags": ["programming"]
			},
			{
				"id": "http://otaviocc.micro.blog/2022/04/03/what-i-like.html",
				
				"content_html": "<p>What I like about <a href=\"https://www.flickr.com/\">Flickr</a> and <a href=\"https://glass.photo/\">Glass</a> is the fact they show the pictures‚Äô metadata. Information such as aperture, exposure, and ISO are extremely valuable when you want to learn/improve your photo skills.</p>\n",
				"content_text": "What I like about [Flickr](https://www.flickr.com/) and [Glass](https://glass.photo/) is the fact they show the pictures‚Äô metadata. Information such as aperture, exposure, and ISO are extremely valuable when you want to learn/improve your photo skills.\n",
				"date_published": "2022-04-03T17:05:10+02:00",
				"url": "https://otavio.cc/2022/04/03/what-i-like.html",
				"tags": ["photography","productivity","internet"]
			},
			{
				"id": "http://otaviocc.micro.blog/2022/04/03/every-now-and.html",
				
				"content_html": "<p>Every now and then I reinstall Instagram to find some good photographers to follow. But after scrolling the feed for a few minutes, I‚Äôm bombarded with ads and products. It‚Äôs frustrating.</p>\n<p><a href=\"https://www.flickr.com/\">Flickr</a> and <a href=\"https://glass.photo/\">Glass</a> focus on photos, but on the other hand are way behind in number of users.</p>\n",
				"content_text": "Every now and then I reinstall Instagram to find some good photographers to follow. But after scrolling the feed for a few minutes, I‚Äôm bombarded with ads and products. It‚Äôs frustrating.\n\n[Flickr](https://www.flickr.com/) and [Glass](https://glass.photo/) focus on photos, but on the other hand are way behind in number of users.\n",
				"date_published": "2022-04-03T17:00:06+02:00",
				"url": "https://otavio.cc/2022/04/03/every-now-and.html",
				"tags": ["internet"]
			},
			{
				"id": "http://otaviocc.micro.blog/2022/04/03/i-just-bought.html",
				
				"content_html": "<p>I just bought <a href=\"https://micro.blog/danielpunkass\">@danielpunkass</a>&rsquo;s <a href=\"https://redsweater.com/marsedit/\">MarsEdit</a>. I love the fact it can render Micro.blog&rsquo;s templates for previewing posts. It&rsquo;s perfect for long posts ‚úçÔ∏è üë®‚Äçüíª</p>\n",
				"content_text": "I just bought [@danielpunkass](https://micro.blog/danielpunkass)'s [MarsEdit](https://redsweater.com/marsedit/). I love the fact it can render Micro.blog's templates for previewing posts. It's perfect for long posts ‚úçÔ∏è üë®‚Äçüíª\n",
				"date_published": "2022-04-03T15:59:00+02:00",
				"url": "https://otavio.cc/2022/04/03/i-just-bought.html",
				"tags": ["productivity","internet","blog"]
			},
			{
				"id": "http://otaviocc.micro.blog/2022/04/02/feedbin-can-share.html",
				
				"content_html": "<p><a href=\"https://feedbin.com\">Feedbin</a> can share and save articles to a variety of services. For services it doesn&rsquo;t offer direct support, it&rsquo;s possible to manually configure the integration. That&rsquo;s what I&rsquo;ve done with Micro.blog. In <a href=\"https://feedbin.com/settings/sharing\">Settings &amp; Share</a>, I&rsquo;ve added:</p>\n<pre tabindex=\"0\"><code>https://micro.blog/bookmark?url=${url}\n</code></pre>",
				"content_text": "[Feedbin](https://feedbin.com) can share and save articles to a variety of services. For services it doesn't offer direct support, it's possible to manually configure the integration. That's what I've done with Micro.blog. In [Settings & Share](https://feedbin.com/settings/sharing), I've added:\n\n```\nhttps://micro.blog/bookmark?url=${url}\n```\n",
				"date_published": "2022-04-02T16:51:00+02:00",
				"url": "https://otavio.cc/2022/04/02/feedbin-can-share.html",
				"tags": ["productivity","internet","blog"]
			},
			{
				"id": "http://otaviocc.micro.blog/2022/04/01/lego-has-a.html",
				
				"content_html": "<p>LEGO¬Æ has a <a href=\"https://www.lego.com/en-us/product/back-to-the-future-time-machine-10300\">new DeLorean</a> set, and you can choose which model to build. It has everything, including the banana from the second movie ü§ì üí∏</p>\n",
				"content_text": "LEGO¬Æ has a [new DeLorean](https://www.lego.com/en-us/product/back-to-the-future-time-machine-10300) set, and you can choose which model to build. It has everything, including the banana from the second movie ü§ì üí∏\n",
				"date_published": "2022-04-01T16:32:04+02:00",
				"url": "https://otavio.cc/2022/04/01/lego-has-a.html"
			},
			{
				"id": "http://otaviocc.micro.blog/2022/03/30/im-pretty-happy.html",
				
				"content_html": "<p>I&rsquo;m pretty happy with work-life balance at work and decided to resume German classes ü§ì üìö</p>\n",
				"content_text": "I'm pretty happy with work-life balance at work and decided to resume German classes ü§ì üìö\n",
				"date_published": "2022-03-30T11:21:00+02:00",
				"url": "https://otavio.cc/2022/03/30/im-pretty-happy.html",
				"tags": ["book"]
			},
			{
				"id": "http://otaviocc.micro.blog/2022/03/25/two-days-ago.html",
				
				"content_html": "<p>Two days ago I reinstalled Instagram to try the new &ldquo;feature&rdquo;, which allows users to <a href=\"https://about.instagram.com/blog/announcements/favorites-and-following\">filter their timelines by favorites and following</a>. Truth is, this is just a way they found to shoehorn more ads/promoted content in the user&rsquo;s feed. Uninstalled today.</p>\n",
				"content_text": "Two days ago I reinstalled Instagram to try the new \"feature\", which allows users to [filter their timelines by favorites and following](https://about.instagram.com/blog/announcements/favorites-and-following). Truth is, this is just a way they found to shoehorn more ads/promoted content in the user's feed. Uninstalled today.\n",
				"date_published": "2022-03-25T12:37:09+02:00",
				"url": "https://otavio.cc/2022/03/25/two-days-ago.html",
				"tags": ["photography","internet"]
			},
			{
				"id": "http://otaviocc.micro.blog/2022/03/22/today-i-updated.html",
				
				"content_html": "<p>Today I updated <a href=\"https://github.com/MicroClientSwift/MicroClient\">my network client library</a> and documented all its public methods. For <a href=\"https://microclientswift.github.io/MicroClient/documentation/microclient/\">publishing the documentation</a> I&rsquo;ve used <a href=\"https://github.com/apple/swift-docc\">Swift-DocC</a>, Apple&rsquo;s documentation compiler for Swift modules üë®‚Äçüíª</p>\n",
				"content_text": "Today I updated [my network client library](https://github.com/MicroClientSwift/MicroClient) and documented all its public methods. For [publishing the documentation](https://microclientswift.github.io/MicroClient/documentation/microclient/) I've used [Swift-DocC](https://github.com/apple/swift-docc), Apple's documentation compiler for Swift modules üë®‚Äçüíª\n",
				"date_published": "2022-03-23T00:06:58+02:00",
				"url": "https://otavio.cc/2022/03/22/today-i-updated.html",
				"tags": ["programming"]
			},
			{
				"id": "http://otaviocc.micro.blog/2022/03/22/i-have-some.html",
				
				"content_html": "<p>I have some weird hobbies. The current one is drawing fantasy maps. I&rsquo;m obsessed by fantasy maps lately.</p>\n",
				"content_text": "I have some weird hobbies. The current one is drawing fantasy maps. I'm obsessed by fantasy maps lately.\n",
				"date_published": "2022-03-22T08:42:47+02:00",
				"url": "https://otavio.cc/2022/03/22/i-have-some.html"
			},
			{
				"id": "http://otaviocc.micro.blog/2022/03/22/the-apple-watch.html",
				
				"content_html": "<p>The Apple Watch armband is burning my wrist. That little piece of metal from the Sport Band, from the <a href=\"https://www.apple.com/shop/product/MKU83AM/A/41mm-midnight-sport-band-regular\">pin-and-tuck mechanism</a>.</p>\n",
				"content_text": "The Apple Watch armband is burning my wrist. That little piece of metal from the Sport Band, from the [pin-and-tuck mechanism](https://www.apple.com/shop/product/MKU83AM/A/41mm-midnight-sport-band-regular).\n",
				"date_published": "2022-03-22T08:36:29+02:00",
				"url": "https://otavio.cc/2022/03/22/the-apple-watch.html"
			},
			{
				"id": "http://otaviocc.micro.blog/2022/03/21/the-first-think.html",
				
				"content_html": "<p>The first think I do in the morning is to get my phone and start browsing. Last night I decided to leave the phone outside the bedroom and take only my Kindle with me. When I woke up, I got the Kindle and read an entire chapter. From now on, I&rsquo;ll do this every night.</p>\n",
				"content_text": "The first think I do in the morning is to get my phone and start browsing. Last night I decided to leave the phone outside the bedroom and take only my Kindle with me. When I woke up, I got the Kindle and read an entire chapter. From now on, I'll do this every night.\n",
				"date_published": "2022-03-21T12:13:01+02:00",
				"url": "https://otavio.cc/2022/03/21/the-first-think.html",
				"tags": ["productivity","book","internet"]
			},
			{
				"id": "http://otaviocc.micro.blog/2022/03/21/i-wish-it.html",
				
				"content_html": "<p>I wish it was possible to share photos on Instagram privately with a selected number of people without having to make the entire profile private.</p>\n<p>Even making the profile private, I still have to share with all the followers. I would like to select a group of people per photo.</p>\n",
				"content_text": "I wish it was possible to share photos on Instagram privately with a selected number of people without having to make the entire profile private.\n\nEven making the profile private, I still have to share with all the followers. I would like to select a group of people per photo.\n",
				"date_published": "2022-03-21T11:51:28+02:00",
				"url": "https://otavio.cc/2022/03/21/i-wish-it.html",
				"tags": ["photography","internet"]
			},
			{
				"id": "http://otaviocc.micro.blog/2022/03/21/somone-didnt-like.html",
				
				"content_html": "<p>üì∑ Someone didn&rsquo;t like what they read on the newspaper.</p>\n<!-- raw HTML omitted -->\n",
				"content_text": "üì∑ Someone didn't like what they read on the newspaper.\n\n<img src=\"https://otavio.cc/uploads/2022/6285d2b481.jpg\" width=\"600\" height=\"400\" alt=\"\" />\n",
				"date_published": "2022-03-21T01:15:52+02:00",
				"url": "https://otavio.cc/2022/03/21/somone-didnt-like.html",
				"tags": ["photography"]
			},
			{
				"id": "http://otaviocc.micro.blog/2022/03/19/i-was-trying.html",
				
				"content_html": "<p>I was trying to read, but my neighbors are turning their walls into sieves. They&rsquo;re drilling every square foot of their apartment&rsquo;s walls.</p>\n",
				"content_text": "I was trying to read, but my neighbors are turning their walls into sieves. They're drilling every square foot of their apartment's walls.\n",
				"date_published": "2022-03-19T17:05:49+02:00",
				"url": "https://otavio.cc/2022/03/19/i-was-trying.html"
			},
			{
				"id": "http://otaviocc.micro.blog/2022/03/13/stop-wars.html",
				
				"content_html": "<p>üì∑ Stop Wars</p>\n<p><img src=\"https://otavio.cc/uploads/2022/116c07b17f.jpg\" alt=\"\"></p>\n",
				"content_text": "üì∑ Stop Wars\n\n![](https://otavio.cc/uploads/2022/116c07b17f.jpg)\n",
				"date_published": "2022-03-13T11:32:00+02:00",
				"url": "https://otavio.cc/2022/03/13/stop-wars.html",
				"tags": ["photography"]
			},
			{
				"id": "http://otaviocc.micro.blog/2022/03/12/ive-reset-my.html",
				
				"content_html": "<p>I&rsquo;ve reset my Firefox browser and installed <a href=\"https://addons.mozilla.org/en-US/firefox/addon/multi-account-containers/\">Firefox Multi-Account Containers</a> to manage sessions. The concept is quite interesting, and every browser should implement something similar.</p>\n",
				"content_text": "I've reset my Firefox browser and installed [Firefox Multi-Account Containers](https://addons.mozilla.org/en-US/firefox/addon/multi-account-containers/) to manage sessions. The concept is quite interesting, and every browser should implement something similar.\n",
				"date_published": "2022-03-12T02:18:03+02:00",
				"url": "https://otavio.cc/2022/03/12/ive-reset-my.html",
				"tags": ["productivity","internet"]
			},
			{
				"id": "http://otaviocc.micro.blog/2022/03/09/a-long-time.html",
				
				"content_html": "<p>A long time ago I bought these <a href=\"https://www.storycubes.com/en/games/\">Story Cubes</a> but never played with them. Starting today I&rsquo;ll use them daily to create stories and practice German. Don&rsquo;t worry, I won&rsquo;t share any of the stories.</p>\n",
				"content_text": "A long time ago I bought these [Story Cubes](https://www.storycubes.com/en/games/) but never played with them. Starting today I'll use them daily to create stories and practice German. Don't worry, I won't share any of the stories.\n",
				"date_published": "2022-03-09T18:51:35+02:00",
				"url": "https://otavio.cc/2022/03/09/a-long-time.html",
				"tags": ["game"]
			},
			{
				"id": "http://otaviocc.micro.blog/2022/03/09/the-catan-collection.html",
				
				"content_html": "<p>üé≤ The CATAN collection is growing&hellip;</p>\n<ul>\n<li>CATAN</li>\n<li>CATAN Traders &amp; Barbarians</li>\n<li>CATAN Traveler</li>\n<li>CATAN Dice Game</li>\n<li>CATAN for Nintendo Switch</li>\n</ul>\n",
				"content_text": "üé≤ The CATAN collection is growing...\n\n* CATAN\n* CATAN Traders & Barbarians\n* CATAN Traveler\n* CATAN Dice Game\n* CATAN for Nintendo Switch\n",
				"date_published": "2022-03-09T12:23:40+02:00",
				"url": "https://otavio.cc/2022/03/09/the-catan-collection.html",
				"tags": ["game"]
			},
			{
				"id": "http://otaviocc.micro.blog/2022/03/08/i-have-three.html",
				
				"content_html": "<p>I have three long posts to publish, but every single time I read them, I decide to change something here and there. I never know when it&rsquo;s time to stop (it&rsquo;s the same thing when I draw).</p>\n",
				"content_text": "I have three long posts to publish, but every single time I read them, I decide to change something here and there. I never know when it's time to stop (it's the same thing when I draw).\n",
				"date_published": "2022-03-08T14:49:19+02:00",
				"url": "https://otavio.cc/2022/03/08/i-have-three.html"
			},
			{
				"id": "http://otaviocc.micro.blog/2022/03/08/gonna-play-catan.html",
				
				"content_html": "<p>üé≤ Gonna play Catan today.</p>\n",
				"content_text": "üé≤ Gonna play Catan today.\n",
				"date_published": "2022-03-08T14:41:00+02:00",
				"url": "https://otavio.cc/2022/03/08/gonna-play-catan.html",
				"tags": ["game"]
			},
			{
				"id": "http://otaviocc.micro.blog/2022/03/08/floating-lights-ok.html",
				
				"content_html": "<p>üì∑ Floating lights</p>\n<!-- raw HTML omitted -->\n<p>The cars and buildings are reflections on the store window, and the neon is on the store&rsquo;s back wall. I really love the effect.</p>\n",
				"content_text": "üì∑ Floating lights\n\n<img src=\"https://otavio.cc/uploads/2022/bd44daf10c.jpg\" width=\"600\" height=\"400\" alt=\"\" />\n\nThe cars and buildings are reflections on the store window, and the neon is on the store's back wall. I really love the effect.\n",
				"date_published": "2022-03-08T12:24:00+02:00",
				"url": "https://otavio.cc/2022/03/08/floating-lights-ok.html",
				"tags": ["photography"]
			},
			{
				"id": "http://otaviocc.micro.blog/2022/03/06/first-time-using.html",
				
				"content_html": "<p>First time using <a href=\"https://getdrafts.com/\">Drafts</a>. Not bad. It&rsquo;s fast, supports automation, and allows me to publish to social networks directly from the app üë®‚Äçüíª</p>\n",
				"content_text": "First time using [Drafts](https://getdrafts.com/). Not bad. It's fast, supports automation, and allows me to publish to social networks directly from the app üë®‚Äçüíª\n",
				"date_published": "2022-03-06T20:17:10+02:00",
				"url": "https://otavio.cc/2022/03/06/first-time-using.html",
				"tags": ["productivity","blog"]
			},
			{
				"id": "http://otaviocc.micro.blog/2022/03/06/i-took-the.html",
				
				"content_html": "<p>I took the day off tomorrow. Maybe I can finish the post about testing that I&rsquo;ve been procrastinating for a long time ‚úçÔ∏è</p>\n",
				"content_text": "I took the day off tomorrow. Maybe I can finish the post about testing that I've been procrastinating for a long time ‚úçÔ∏è\n",
				"date_published": "2022-03-06T19:45:00+02:00",
				"url": "https://otavio.cc/2022/03/06/i-took-the.html"
			},
			{
				"id": "http://otaviocc.micro.blog/2022/03/03/its-possible-to.html",
				
				"content_html": "<p>It‚Äôs possible to turn off the weird cursor behavior on the iPadOS. It‚Äôs hidden in <code>Accessibility &gt; Pointer Animation</code>. Turning it off does the trick.</p>\n",
				"content_text": "It‚Äôs possible to turn off the weird cursor behavior on the iPadOS. It‚Äôs hidden in `Accessibility > Pointer Animation`. Turning it off does the trick.\n",
				"date_published": "2022-03-03T20:26:18+02:00",
				"url": "https://otavio.cc/2022/03/03/its-possible-to.html"
			},
			{
				"id": "http://otaviocc.micro.blog/2022/03/01/after-years-using.html",
				
				"content_html": "<p>After years using Safari I decided to go back to <a href=\"https://www.mozilla.org/en-US/firefox/\">Firefox</a>. No only the browser but also Relay, for email aliases, and Pocket, for bookmark management/read later. Byt the way, Firefox&rsquo;s <a href=\"https://support.mozilla.org/en-US/kb/containers\">Multi-Account Containers</a> is a killer feature.</p>\n",
				"content_text": "After years using Safari I decided to go back to [Firefox](https://www.mozilla.org/en-US/firefox/). No only the browser but also Relay, for email aliases, and Pocket, for bookmark management/read later. Byt the way, Firefox's [Multi-Account Containers](https://support.mozilla.org/en-US/kb/containers) is a killer feature.\n",
				"date_published": "2022-03-01T11:23:55+02:00",
				"url": "https://otavio.cc/2022/03/01/after-years-using.html",
				"tags": ["productivity","internet"]
			},
			{
				"id": "http://otaviocc.micro.blog/2022/03/01/the-commute-to.html",
				
				"content_html": "<p>üö≤ The commute to the new office space takes more time by subway than by bicycle. I guess it&rsquo;s time to gift me a <a href=\"https://www.brompton.com/\">Brompton</a>.</p>\n",
				"content_text": "üö≤ The commute to the new office space takes more time by subway than by bicycle. I guess it's time to gift me a [Brompton](https://www.brompton.com/).\n",
				"date_published": "2022-03-01T11:06:57+02:00",
				"url": "https://otavio.cc/2022/03/01/the-commute-to.html",
				"tags": ["bike"]
			},
			{
				"id": "http://otaviocc.micro.blog/2022/02/27/after-six-years.html",
				
				"content_html": "<p>üìö After six years living in Berlin I learned the city has an <a href=\"https://www.voebb.de/\">amazing digital library</a> for a mere 10 EUR/year.</p>\n",
				"content_text": "üìö After six years living in Berlin I learned the city has an [amazing digital library](https://www.voebb.de/) for a mere 10 EUR/year.\n",
				"date_published": "2022-02-27T09:34:20+02:00",
				"url": "https://otavio.cc/2022/02/27/after-six-years.html",
				"tags": ["book"]
			},
			{
				"id": "http://otaviocc.micro.blog/2022/02/24/this-magic-keyboard.html",
				
				"content_html": "<p>This <a href=\"https://www.apple.com/ipad-keyboards/\">Magic Keyboard</a> for the iPad Pro is truly magical. Pricy, but magical üë®‚Äçüíª</p>\n",
				"content_text": "This [Magic Keyboard](https://www.apple.com/ipad-keyboards/) for the iPad Pro is truly magical. Pricy, but magical üë®‚Äçüíª\n",
				"date_published": "2022-02-24T11:38:31+02:00",
				"url": "https://otavio.cc/2022/02/24/this-magic-keyboard.html"
			},
			{
				"id": "http://otaviocc.micro.blog/2022/02/22/apparently-a-good.html",
				
				"content_html": "<p>Apparently a good way to practice a language skill is keeping a journal in the language one wants to exercise. I‚Äôll start journaling in German ‚úçüèª üá©üá™</p>\n",
				"content_text": "Apparently a good way to practice a language skill is keeping a journal in the language one wants to exercise. I‚Äôll start journaling in German ‚úçüèª üá©üá™\n",
				"date_published": "2022-02-22T12:28:23+02:00",
				"url": "https://otavio.cc/2022/02/22/apparently-a-good.html"
			},
			{
				"id": "http://otaviocc.micro.blog/2022/02/21/its-past-am.html",
				
				"content_html": "<p>It&rsquo;s past 2am and Xcode quit unexpectedly. Maybe it&rsquo;s a sign I should head to bed üë®‚Äçüíª</p>\n",
				"content_text": "It's past 2am and Xcode quit unexpectedly. Maybe it's a sign I should head to bed üë®‚Äçüíª\n",
				"date_published": "2022-02-21T03:38:27+02:00",
				"url": "https://otavio.cc/2022/02/21/its-past-am.html"
			},
			{
				"id": "http://otaviocc.micro.blog/2022/02/18/tomorrow-ill-work.html",
				
				"content_html": "<p>Tomorrow I‚Äôll work on my Micropub Swift framework. At the end of the weekend I want to have a working framework with support for posting, bookmarking, replying, and uploading media üë®üèª‚Äçüíª</p>\n",
				"content_text": "Tomorrow I‚Äôll work on my Micropub Swift framework. At the end of the weekend I want to have a working framework with support for posting, bookmarking, replying, and uploading media üë®üèª‚Äçüíª\n",
				"date_published": "2022-02-18T12:27:23+02:00",
				"url": "https://otavio.cc/2022/02/18/tomorrow-ill-work.html",
				"tags": ["programming","blog"]
			},
			{
				"id": "http://otaviocc.micro.blog/2022/02/18/wouldnt-be-nice.html",
				
				"content_html": "<p>Wouldn‚Äôt be nice if <a href=\"https://glass.photo/\">Glass</a> had free accounts for peoples who want to follow others but not necessarily post photos? Maybe it would drive even more people to become paid users.</p>\n",
				"content_text": "Wouldn‚Äôt be nice if [Glass](https://glass.photo/) had free accounts for peoples who want to follow others but not necessarily post photos? Maybe it would drive even more people to become paid users.\n",
				"date_published": "2022-02-18T12:20:44+02:00",
				"url": "https://otavio.cc/2022/02/18/wouldnt-be-nice.html",
				"tags": ["photography","internet"]
			},
			{
				"id": "http://otaviocc.micro.blog/2022/02/18/glass-added-ipad.html",
				
				"content_html": "<p>üì∑ <a href=\"https://glass.photo/\">Glass</a> added iPad support! The app looks beautiful on the larger screen.</p>\n",
				"content_text": "üì∑ [Glass](https://glass.photo/) added iPad support! The app looks beautiful on the larger screen.\n",
				"date_published": "2022-02-18T12:18:29+02:00",
				"url": "https://otavio.cc/2022/02/18/glass-added-ipad.html",
				"tags": ["photography"]
			},
			{
				"id": "http://otaviocc.micro.blog/2022/02/13/im-splitting-microapi.html",
				
				"content_html": "<p>I&rsquo;m splitting <a href=\"https://github.com/MicroClientSwift/MicroAPI\">MicroAPI</a> into two Swift Packages. One for Micro.blog and the other just for <a href=\"https://www.w3.org/TR/micropub/\">Micropub</a> related things. The website <a href=\"https://micropub.rocks\">Micropub Rocks!</a> is a great way to validate Micropub implementation üë®‚Äçüíª</p>\n",
				"content_text": "I'm splitting [MicroAPI](https://github.com/MicroClientSwift/MicroAPI) into two Swift Packages. One for Micro.blog and the other just for [Micropub](https://www.w3.org/TR/micropub/) related things. The website [Micropub Rocks!](https://micropub.rocks) is a great way to validate Micropub implementation üë®‚Äçüíª\n",
				"date_published": "2022-02-13T13:41:19+02:00",
				"url": "https://otavio.cc/2022/02/13/im-splitting-microapi.html",
				"tags": ["programming","blog"]
			},
			{
				"id": "http://otaviocc.micro.blog/2022/02/06/microclient-has-a.html",
				
				"content_html": "<p><a href=\"https://github.com/MicroClientSwift/MicroClient\">MicroClient</a> has a new house on GitHub. I&rsquo;ll use the <a href=\"https://github.com/MicroClientSwift\">organization</a> for <em>clients</em> which use MicroClient, such as <a href=\"https://github.com/MicroClientSwift/MicroAPI\">MicroAPI</a> (for Micro.blog) and <a href=\"https://github.com/MicroClientSwift/MicroPinboard\">MicroPinboard</a> (Pinboard.in).</p>\n",
				"content_text": "[MicroClient](https://github.com/MicroClientSwift/MicroClient) has a new house on GitHub. I'll use the [organization](https://github.com/MicroClientSwift) for _clients_ which use MicroClient, such as [MicroAPI](https://github.com/MicroClientSwift/MicroAPI) (for Micro.blog) and [MicroPinboard](https://github.com/MicroClientSwift/MicroPinboard) (Pinboard.in).\n",
				"date_published": "2022-02-06T10:36:57+02:00",
				"url": "https://otavio.cc/2022/02/06/microclient-has-a.html",
				"tags": ["programming"]
			},
			{
				"id": "http://otaviocc.micro.blog/2022/02/06/ive-added-the.html",
				
				"content_html": "<p>üë®‚Äçüíª I&rsquo;ve added the following to Marfa&rsquo;s <code>config.json</code> to get Xcode&rsquo;s theme for code blocks:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-json\" data-lang=\"json\">{\n    <span style=\"color:#000\">&#34;pygmentsCodefences&#34;</span>: <span style=\"color:#a90d91\">true</span>,\n    <span style=\"color:#000\">&#34;pygmentsCodefencesGuessSyntax&#34;</span>: <span style=\"color:#a90d91\">true</span>,\n    <span style=\"color:#000\">&#34;pygmentsStyle&#34;</span>: <span style=\"color:#c41a16\">&#34;xcode&#34;</span>\n}\n</code></pre></div>",
				"content_text": "üë®‚Äçüíª I've added the following to Marfa's `config.json` to get Xcode's theme for code blocks:\n\n```json\n{\n    \"pygmentsCodefences\": true,\n    \"pygmentsCodefencesGuessSyntax\": true,\n    \"pygmentsStyle\": \"xcode\"\n}\n```\n",
				"date_published": "2022-02-06T10:25:26+02:00",
				"url": "https://otavio.cc/2022/02/06/ive-added-the.html",
				"tags": ["programming","blog"]
			},
			{
				"id": "http://otaviocc.micro.blog/2022/02/05/kapitalismus-normalisiert-zerstrt.html",
				
				"content_html": "<p>üì∑ Kapitalismus normalisiert, zerst√∂rt und t√∂tet.</p>\n<!-- raw HTML omitted -->\n",
				"content_text": " üì∑ Kapitalismus normalisiert, zerst√∂rt und t√∂tet.\n\n<img src=\"https://otavio.cc/uploads/2022/66a36c18c5.jpg\" width=\"400\" height=\"600\" alt=\"\" />\n",
				"date_published": "2022-02-05T16:44:21+02:00",
				"url": "https://otavio.cc/2022/02/05/kapitalismus-normalisiert-zerstrt.html",
				"tags": ["photography"]
			},
			{
				"id": "http://otaviocc.micro.blog/2022/02/05/i-did-some.html",
				
				"content_html": "<p>I did some changes to Marfa&rsquo;s CSS to make more room for code blocks. E.g.,</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#a90d91\">let</span> <span style=\"color:#000\">request</span> = <span style=\"color:#000\">MicropubRequestFactory</span>.<span style=\"color:#000\">makeNewPostRequest</span>(\n    <span style=\"color:#000\">content</span>: <span style=\"color:#c41a16\">&#34;This is the body&#34;</span>,\n    <span style=\"color:#000\">isDraft</span>: <span style=\"color:#a90d91\">true</span>\n)\n\n<span style=\"color:#a90d91\">let</span> <span style=\"color:#000\">postResponse</span> = <span style=\"color:#a90d91\">try</span> <span style=\"color:#000\">await</span> <span style=\"color:#000\">client</span>.<span style=\"color:#000\">run</span>(<span style=\"color:#000\">request</span>)\n</code></pre></div>",
				"content_text": "I did some changes to Marfa's CSS to make more room for code blocks. E.g.,\r\n\r\n```swift\r\nlet request = MicropubRequestFactory.makeNewPostRequest(\r\n    content: \"This is the body\",\r\n    isDraft: true\r\n)\r\n\r\nlet postResponse = try await client.run(request)\r\n```\n",
				"date_published": "2022-02-05T02:51:23+02:00",
				"url": "https://otavio.cc/2022/02/05/i-did-some.html",
				"tags": ["programming"]
			},
			{
				"id": "http://otaviocc.micro.blog/2022/02/04/when-i-created.html",
				
				"content_html": "<p>When I created my DuckDuckGo email address I‚Äôve used an old email address as forwarding address. I regretted my decision, and for a while it wasn‚Äôt possible to change it. Recently DDG created a <a href=\"https://duckduckgo.com/email/change-email-address\">page</a> which allows users to change the forwarding address, so all good now ‚úåÔ∏è</p>\n",
				"content_text": "When I created my DuckDuckGo email address I‚Äôve used an old email address as forwarding address. I regretted my decision, and for a while it wasn‚Äôt possible to change it. Recently DDG created a [page](https://duckduckgo.com/email/change-email-address) which allows users to change the forwarding address, so all good now ‚úåÔ∏è\n",
				"date_published": "2022-02-04T16:42:11+02:00",
				"url": "https://otavio.cc/2022/02/04/when-i-created.html",
				"tags": ["internet"]
			},
			{
				"id": "http://otaviocc.micro.blog/2022/01/29/i-just-realized.html",
				
				"content_html": "<p>I just realized Notes and Reminders have tags now. I&rsquo;m gonna used them for a few days to see if they could replace the apps I currently use.</p>\n",
				"content_text": "I just realized Notes and Reminders have tags now. I'm gonna used them for a few days to see if they could replace the apps I currently use.\n",
				"date_published": "2022-01-29T11:52:00+02:00",
				"url": "https://otavio.cc/2022/01/29/i-just-realized.html",
				"tags": ["productivity"]
			},
			{
				"id": "http://otaviocc.micro.blog/2022/01/25/im-addicted-to.html",
				
				"content_html": "<p>üéÆ I&rsquo;m addicted to <a href=\"https://www.nintendo.com/games/detail/big-brain-academy-brain-vs-brain-switch/\">Big Brain Academy</a> for Switch. Avoid it if you can!</p>\n",
				"content_text": "üéÆ I'm addicted to [Big Brain Academy](https://www.nintendo.com/games/detail/big-brain-academy-brain-vs-brain-switch/) for Switch. Avoid it if you can!\n",
				"date_published": "2022-01-25T14:28:57+02:00",
				"url": "https://otavio.cc/2022/01/25/im-addicted-to.html",
				"tags": ["game"]
			},
			{
				"id": "http://otaviocc.micro.blog/2022/01/25/two-taxes-in.html",
				
				"content_html": "<p>üì∑ Two taxes in one photo: <a href=\"https://de.wikipedia.org/wiki/Kirchensteuer_(Deutschland)\">Kirchensteuer</a> ‚õ™Ô∏è and <a href=\"https://de.wikipedia.org/wiki/Rundfunkbeitrag\">Rundfunkbeitrag</a> üì∫</p>\n<!-- raw HTML omitted -->\n",
				"content_text": "üì∑ Two taxes in one photo: [Kirchensteuer](https://de.wikipedia.org/wiki/Kirchensteuer_(Deutschland)) ‚õ™Ô∏è and [Rundfunkbeitrag](https://de.wikipedia.org/wiki/Rundfunkbeitrag) üì∫\n\n<img src=\"https://otavio.cc/uploads/2022/288932484c.jpg\" width=\"400\" height=\"600\" alt=\"\" />\n",
				"date_published": "2022-01-25T12:20:42+02:00",
				"url": "https://otavio.cc/2022/01/25/two-taxes-in.html",
				"tags": ["photography"]
			},
			{
				"id": "http://otaviocc.micro.blog/2022/01/24/humboldt-forum-jpeg.html",
				
				"content_html": "<p>Humboldt Forum. JPEG, SOOC üì∑</p>\n<!-- raw HTML omitted -->\n",
				"content_text": "Humboldt Forum. JPEG, SOOC üì∑\n\n<img src=\"https://otavio.cc/uploads/2022/06525a2f7d.jpg\" width=\"400\" height=\"600\" alt=\"\" />\n",
				"date_published": "2022-01-24T01:23:40+02:00",
				"url": "https://otavio.cc/2022/01/24/humboldt-forum-jpeg.html",
				"tags": ["photography"]
			},
			{
				"id": "http://otaviocc.micro.blog/2022/01/23/yesterday-i-wrote.html",
				
				"content_html": "<p>Yesterday I wrote a Shortcut to <em>check in</em> on <a href=\"https://dayone.app\">Day One</a> using <a href=\"https://developer.foursquare.com/reference/places-nearby\">Foursquare&rsquo;s Places API</a>. It works fine, but I didn&rsquo;t find a way to pass the precise venue geo information - from the payload - to the Day One action as location üë®‚Äçüíª</p>\n",
				"content_text": "Yesterday I wrote a Shortcut to *check in* on [Day One](https://dayone.app) using [Foursquare's Places API](https://developer.foursquare.com/reference/places-nearby). It works fine, but I didn't find a way to pass the precise venue geo information - from the payload - to the Day One action as location üë®‚Äçüíª\n",
				"date_published": "2022-01-23T14:43:25+02:00",
				"url": "https://otavio.cc/2022/01/23/yesterday-i-wrote.html",
				"tags": ["programming","blog"]
			},
			{
				"id": "http://otaviocc.micro.blog/2022/01/20/ive-imported-all.html",
				
				"content_html": "<p>I&rsquo;ve imported all the movies I watched on Netflix, and all the checkins I have on Foursquare in <a href=\"https://dayone.app\">Day One</a> ü§ì üë®‚Äçüíª Netflix has a csv file with everything one watched, and Foursquare two json files, one for checkins another one for the photos. Fun stuff.</p>\n",
				"content_text": "I've imported all the movies I watched on Netflix, and all the checkins I have on Foursquare in [Day One](https://dayone.app) ü§ì üë®‚Äçüíª Netflix has a csv file with everything one watched, and Foursquare two json files, one for checkins another one for the photos. Fun stuff.\n",
				"date_published": "2022-01-20T01:24:18+02:00",
				"url": "https://otavio.cc/2022/01/20/ive-imported-all.html",
				"tags": ["blog"]
			},
			{
				"id": "http://otaviocc.micro.blog/2022/01/17/i-currently-have.html",
				
				"content_html": "<p>I currently have this Micro.blog and a Jekyll blog for longer posts, but I&rsquo;m considering moving everything from Jekyll to Micro.blog, centralizing all in once place. The only downside is that Micro.blog doesn&rsquo;t support syntax highlighting for code snippets. But again, once place.</p>\n",
				"content_text": "I currently have this Micro.blog and a Jekyll blog for longer posts, but I'm considering moving everything from Jekyll to Micro.blog, centralizing all in once place. The only downside is that Micro.blog doesn't support syntax highlighting for code snippets. But again, once place.\n",
				"date_published": "2022-01-17T17:09:41+02:00",
				"url": "https://otavio.cc/2022/01/17/i-currently-have.html",
				"tags": ["blog"]
			},
			{
				"id": "http://otaviocc.micro.blog/2022/01/12/who-needs-ifttt.html",
				
				"content_html": "<p>Who needs <a href=\"https://ifttt.com\">IFTTT</a> when <a href=\"https://support.apple.com/guide/shortcuts/welcome/ios\">Shortcuts</a> can do a better job locally? I&rsquo;m using Shortcuts and <a href=\"https://datajar.app\">Data Jar</a> to import my photos from <a href=\"https://glass.photo\">glass.photo</a> into <a href=\"https://dayoneapp.com\">Day One</a>. While the shortcut holds all the logic, Data Jar stores the ids of the photos already imported.</p>\n<!-- raw HTML omitted -->\n",
				"content_text": "Who needs [IFTTT](https://ifttt.com) when [Shortcuts](https://support.apple.com/guide/shortcuts/welcome/ios) can do a better job locally? I'm using Shortcuts and [Data Jar](https://datajar.app) to import my photos from [glass.photo](https://glass.photo) into [Day One](https://dayoneapp.com). While the shortcut holds all the logic, Data Jar stores the ids of the photos already imported.\n\n<img src=\"https://otavio.cc/uploads/2022/1fef0ae1cb.png\" width=\"600\" height=\"398\" alt=\"\" />\n",
				"date_published": "2022-01-12T12:22:51+02:00",
				"url": "https://otavio.cc/2022/01/12/who-needs-ifttt.html",
				"tags": ["photography"]
			},
			{
				"id": "http://otaviocc.micro.blog/2022/01/11/its-disappointing-than.html",
				
				"content_html": "<p>It&rsquo;s disappointing that <a href=\"https://dayoneapp.com\">Day One</a> offers much more shortcut <em>actions</em> in iOS than macOS. It&rsquo;s much easier to write shortcuts on a bigger screen.</p>\n",
				"content_text": "It's disappointing that [Day One](https://dayoneapp.com) offers much more shortcut _actions_ in iOS than macOS. It's much easier to write shortcuts on a bigger screen.\n",
				"date_published": "2022-01-11T12:54:14+02:00",
				"url": "https://otavio.cc/2022/01/11/its-disappointing-than.html",
				"tags": ["productivity","blog"]
			},
			{
				"id": "http://otaviocc.micro.blog/2022/01/10/yesterday-i-learned.html",
				
				"content_html": "<p>Yesterday I learned about <a href=\"https://datajar.app\">Data Jar</a>, a pretty handy tool to use with <a href=\"https://support.apple.com/guide/shortcuts/welcome/ios\">iOS/macOS Shortcuts</a>. It&rsquo;s pretty much a storage container to save data from a shortcut to use later or access from another shortcut üë®‚Äçüíª</p>\n",
				"content_text": "Yesterday I learned about [Data Jar](https://datajar.app), a pretty handy tool to use with [iOS/macOS Shortcuts](https://support.apple.com/guide/shortcuts/welcome/ios). It's pretty much a storage container to save data from a shortcut to use later or access from another shortcut üë®‚Äçüíª\n",
				"date_published": "2022-01-10T14:58:03+02:00",
				"url": "https://otavio.cc/2022/01/10/yesterday-i-learned.html",
				"tags": ["programming"]
			},
			{
				"id": "http://otaviocc.micro.blog/2022/01/10/i-have-a.html",
				
				"content_html": "<p>I have a confession to make: the first time I saw <a href=\"https://obsidian.md/\">Obsidian</a> I hated it. But we shouldn&rsquo;t judge a book by its cover, so I started using it and I&rsquo;m so glad I did. It&rsquo;s insanely good. I wish I had something this good when I was working on my dissertation years ago.</p>\n",
				"content_text": "I have a confession to make: the first time I saw [Obsidian](https://obsidian.md/) I hated it. But we shouldn't judge a book by its cover, so I started using it and I'm so glad I did. It's insanely good. I wish I had something this good when I was working on my dissertation years ago.\n",
				"date_published": "2022-01-10T14:51:49+02:00",
				"url": "https://otavio.cc/2022/01/10/i-have-a.html",
				"tags": ["productivity"]
			},
			{
				"id": "http://otaviocc.micro.blog/2022/01/09/im-gonna-create.html",
				
				"content_html": "<p>I&rsquo;m gonna create a generic API wrapper for <a href=\"https://indieweb.org/Micropub\">Micropub</a> capable sites üë®‚Äçüíª Then it can be used by different clients posting to different blogging platforms.</p>\n",
				"content_text": "I'm gonna create a generic API wrapper for [Micropub](https://indieweb.org/Micropub) capable sites üë®‚Äçüíª Then it can be used by different clients posting to different blogging platforms.\n",
				"date_published": "2022-01-09T16:03:50+02:00",
				"url": "https://otavio.cc/2022/01/09/im-gonna-create.html",
				"tags": ["programming","blog"]
			},
			{
				"id": "http://otaviocc.micro.blog/2022/01/09/when-i-wrote.html",
				
				"content_html": "<p>When I wrote <a href=\"https://github.com/otaviocc/MicroAPI\">MicroAPI</a>, a Swift wrapper to access Micro.blog APIs, I decided to isolate the network client in separate swift package:  <a href=\"https://github.com/otaviocc/MicroClient\">MicroClient</a>.</p>\n<p>Today I ported <a href=\"https://github.com/otaviocc/PinboardKit\">PinboardKit</a> to also use MicroClient.</p>\n<p>MicroClient is pretty generic and can be used by all sorts of projects üë®‚Äçüíª</p>\n",
				"content_text": "When I wrote [MicroAPI](https://github.com/otaviocc/MicroAPI), a Swift wrapper to access Micro.blog APIs, I decided to isolate the network client in separate swift package:  [MicroClient](https://github.com/otaviocc/MicroClient).\n\nToday I ported [PinboardKit](https://github.com/otaviocc/PinboardKit) to also use MicroClient.\n\nMicroClient is pretty generic and can be used by all sorts of projects üë®‚Äçüíª\n",
				"date_published": "2022-01-09T15:25:28+02:00",
				"url": "https://otavio.cc/2022/01/09/when-i-wrote.html",
				"tags": ["programming","blog"]
			},
			{
				"id": "http://otaviocc.micro.blog/2022/01/08/people-watching.html",
				
				"content_html": "<p>People watching‚Ä¶ üì∑</p>\n<!-- raw HTML omitted -->\n",
				"content_text": "People watching‚Ä¶ üì∑\n\n<img src=\"https://otavio.cc/uploads/2022/5f67b287bd.jpg\" width=\"400\" height=\"600\" alt=\"\" />\n",
				"date_published": "2022-01-08T23:10:44+02:00",
				"url": "https://otavio.cc/2022/01/08/people-watching.html",
				"tags": ["photography"]
			},
			{
				"id": "http://otaviocc.micro.blog/2022/01/07/ive-started-using.html",
				
				"content_html": "<p>I&rsquo;ve started using <a href=\"https://obsidian.md\">Obsidian</a> to take notes. Using it with <a href=\"https://workingcopy.app\">Working Copy</a> takes the experience to a whole new level. Simply amazing üë®‚Äçüíª</p>\n",
				"content_text": "I've started using [Obsidian](https://obsidian.md) to take notes. Using it with [Working Copy](https://workingcopy.app) takes the experience to a whole new level. Simply amazing üë®‚Äçüíª\n",
				"date_published": "2022-01-07T15:09:50+02:00",
				"url": "https://otavio.cc/2022/01/07/ive-started-using.html",
				"tags": ["productivity"]
			},
			{
				"id": "http://otaviocc.micro.blog/2022/01/06/i-want-to.html",
				
				"content_html": "<p>I want to port my blog&rsquo;s theme to Micro.blog. I wrote it for Jekyll, so I guess the first step is to learn Hugo and how theming works üíª</p>\n",
				"content_text": "I want to port my blog's theme to Micro.blog. I wrote it for Jekyll, so I guess the first step is to learn Hugo and how theming works üíª\n",
				"date_published": "2022-01-06T16:47:48+02:00",
				"url": "https://otavio.cc/2022/01/06/i-want-to.html",
				"tags": ["programming","blog"]
			},
			{
				"id": "http://otaviocc.micro.blog/2022/01/06/after-weeks-months.html",
				
				"content_html": "<p>After weeks (months?) of bad weather, finally a sunny day. Went for a nice walk during lunch time and took tons of photos with my new camera üö∂ üì∑</p>\n",
				"content_text": "After weeks (months?) of bad weather, finally a sunny day. Went for a nice walk during lunch time and took tons of photos with my new camera üö∂ üì∑\n",
				"date_published": "2022-01-06T16:04:18+02:00",
				"url": "https://otavio.cc/2022/01/06/after-weeks-months.html",
				"tags": ["photography"]
			},
			{
				"id": "http://otaviocc.micro.blog/2022/01/05/kaleidoscope-released-and.html",
				
				"content_html": "<p>Kaleidoscope <a href=\"https://blog.kaleidoscope.app/2022/01/04/xctest-results/\">released</a> an update which allows developers to use the diff tool to read <code>XCTest</code> failures.</p>\n<p>This is a nice idea, and I&rsquo;m looking forward to using it.</p>\n",
				"content_text": "Kaleidoscope [released](https://blog.kaleidoscope.app/2022/01/04/xctest-results/) an update which allows developers to use the diff tool to read `XCTest` failures.\n\nThis is a nice idea, and I'm looking forward to using it.\n",
				"date_published": "2022-01-05T21:00:53+02:00",
				"url": "https://otavio.cc/2022/01/05/kaleidoscope-released-and.html",
				"tags": ["programming"]
			},
			{
				"id": "http://otaviocc.micro.blog/2022/01/05/ritchie-roesch-did.html",
				
				"content_html": "<p><a href=\"https://fujixweekly.com/2022/01/04/how-to-switch-between-custom-presets-more-quickly-on-your-fujifilm-camera/\">Ritchie Roesch</a>:</p>\n<blockquote>\n<p>Did you know that there‚Äôs a faster way to switch between the C1-C7 Custom Presets on your Fujifilm camera? (&hellip;) This will work only if your model has the ability to assign ‚ÄúSelect Custom Setting‚Äù to the Rear Command Dial.</p>\n</blockquote>\n<p>This is great! Highly recommended üì∑</p>\n",
				"content_text": "[Ritchie Roesch](https://fujixweekly.com/2022/01/04/how-to-switch-between-custom-presets-more-quickly-on-your-fujifilm-camera/):\n\n> Did you know that there‚Äôs a faster way to switch between the C1-C7 Custom Presets on your Fujifilm camera? (...) This will work only if your model has the ability to assign ‚ÄúSelect Custom Setting‚Äù to the Rear Command Dial.\n\nThis is great! Highly recommended üì∑\n",
				"date_published": "2022-01-05T20:52:44+02:00",
				"url": "https://otavio.cc/2022/01/05/ritchie-roesch-did.html",
				"tags": ["photography"]
			},
			{
				"id": "http://otaviocc.micro.blog/2022/01/02/the-long-weekend.html",
				
				"content_html": "<p>The long weekend is almost over and I didn&rsquo;t work on the side projects/spikes I planned to put my hands on. On the other hand, I walked an average of 16k steps/day and took a lot of pictures with my new camera.</p>\n",
				"content_text": "The long weekend is almost over and I didn't work on the side projects/spikes I planned to put my hands on. On the other hand, I walked an average of 16k steps/day and took a lot of pictures with my new camera.\n",
				"date_published": "2022-01-02T13:40:31+02:00",
				"url": "https://otavio.cc/2022/01/02/the-long-weekend.html",
				"tags": ["programming"]
			},
			{
				"id": "http://otaviocc.micro.blog/2021/12/29/the-xv-lens.html",
				
				"content_html": "<p>The X100V lens cap doesn‚Äôt fit when the weather sealing filter is attached, but the one from the X100T does üì∑</p>\n<!-- raw HTML omitted -->\n",
				"content_text": "The X100V lens cap doesn‚Äôt fit when the weather sealing filter is attached, but the one from the X100T does üì∑\n\n<img src=\"https://otavio.cc/uploads/2021/ef2c95d8a4.jpg\" width=\"600\" height=\"400\" alt=\"\" />\n",
				"date_published": "2021-12-29T11:30:37+02:00",
				"url": "https://otavio.cc/2021/12/29/the-xv-lens.html",
				"tags": ["photography"]
			},
			{
				"id": "http://otaviocc.micro.blog/2021/12/24/im-trying-to.html",
				
				"content_html": "<p>I&rsquo;m trying to extract Fuji-specific information from photos using <code>CGImageProperties</code>, but I get nothing. From <a href=\"https://developer.apple.com/documentation/imageio/cgimageproperties/camera-maker_dictionaries\">Canon and Nikon it trivial</a>, but for other camera makers I can&rsquo;t make it work üì∑ üë®‚Äçüíª</p>\n",
				"content_text": "I'm trying to extract Fuji-specific information from photos using `CGImageProperties`, but I get nothing. From [Canon and Nikon it trivial](https://developer.apple.com/documentation/imageio/cgimageproperties/camera-maker_dictionaries), but for other camera makers I can't make it work üì∑ üë®‚Äçüíª\n",
				"date_published": "2021-12-24T16:12:52+02:00",
				"url": "https://otavio.cc/2021/12/24/im-trying-to.html",
				"tags": ["photography"]
			},
			{
				"id": "http://otaviocc.micro.blog/2021/12/20/ok-cool-ive.html",
				
				"content_html": "<p>OK, cool. I‚Äôve used the <a href=\"https://github.com/otaviocc/MicroClient\">Network Client</a> and <a href=\"https://github.com/otaviocc/MicroAPI\">API wrapper</a> I wrote to run a 20-line Microblog app directly from the new Playgrounds for iPad.</p>\n",
				"content_text": "OK, cool. I‚Äôve used the [Network Client](https://github.com/otaviocc/MicroClient) and [API wrapper](https://github.com/otaviocc/MicroAPI) I wrote to run a 20-line Microblog app directly from the new Playgrounds for iPad.\n",
				"date_published": "2021-12-20T02:41:00+02:00",
				"url": "https://otavio.cc/2021/12/20/ok-cool-ive.html",
				"tags": ["programming","blog"]
			},
			{
				"id": "http://otaviocc.micro.blog/2021/12/16/thanks-to-my.html",
				
				"content_html": "<p>Thanks to my internet connection it takes seconds (a minute?) to download Xcode. Thanks to my personal computer, it takes hours to install the very same Xcode. But I have no reasons to upgrade my computer since I use the company one to code and an iPad M1 for everything else.</p>\n",
				"content_text": "Thanks to my internet connection it takes seconds (a minute?) to download Xcode. Thanks to my personal computer, it takes hours to install the very same Xcode. But I have no reasons to upgrade my computer since I use the company one to code and an iPad M1 for everything else.\n",
				"date_published": "2021-12-16T08:35:04+02:00",
				"url": "https://otavio.cc/2021/12/16/thanks-to-my.html",
				"tags": ["productivity","internet"]
			},
			{
				"id": "http://otaviocc.micro.blog/2021/12/16/yesterday-apple-launched.html",
				
				"content_html": "<p>Yesterday Apple launched <a href=\"https://developer.apple.com/news/?id=v868vy6e\">Swift Playgrounds 4</a> for iPad, and it&rsquo;s possible now to build iPad and iOS applications directly from the iPad. I&rsquo;m looking forward to porting some of my little experiments to the new project format üë®‚Äçüíª</p>\n",
				"content_text": "Yesterday Apple launched [Swift Playgrounds 4](https://developer.apple.com/news/?id=v868vy6e) for iPad, and it's possible now to build iPad and iOS applications directly from the iPad. I'm looking forward to porting some of my little experiments to the new project format üë®‚Äçüíª\n",
				"date_published": "2021-12-16T07:17:25+02:00",
				"url": "https://otavio.cc/2021/12/16/yesterday-apple-launched.html",
				"tags": ["programming"]
			},
			{
				"id": "http://otaviocc.micro.blog/2021/12/13/i-dont-need.html",
				
				"content_html": "<p>I don&rsquo;t need a new camera. But I want a new one üì∑</p>\n",
				"content_text": "I don't need a new camera. But I want a new one üì∑\n",
				"date_published": "2021-12-13T14:29:52+02:00",
				"url": "https://otavio.cc/2021/12/13/i-dont-need.html",
				"tags": ["photography"]
			},
			{
				"id": "http://otaviocc.micro.blog/2021/12/12/i-exported-my.html",
				
				"content_html": "<p>I exported my <a href=\"https://www.goodreads.com\">Goodreads</a> shelf to import on <a href=\"https://micro.blog\">Micro.blog</a>, but none of the books had ISBN! I had to use the <a href=\"https://isbnsearch.org\">ISBN Search</a> to add the information to more than 90 books üìö The good news: <a href=\"https://micro.blog\">Micro.blog</a> imported all the books correctly.</p>\n",
				"content_text": "I exported my [Goodreads](https://www.goodreads.com) shelf to import on [Micro.blog](https://micro.blog), but none of the books had ISBN! I had to use the [ISBN Search](https://isbnsearch.org) to add the information to more than 90 books üìö The good news: [Micro.blog](https://micro.blog) imported all the books correctly.\n",
				"date_published": "2021-12-12T15:00:55+02:00",
				"url": "https://otavio.cc/2021/12/12/i-exported-my.html",
				"tags": ["book"]
			},
			{
				"id": "http://otaviocc.micro.blog/2021/12/12/fog.html",
				
				"content_html": "<p>Fog üì∑</p>\n<!-- raw HTML omitted -->\n",
				"content_text": "Fog üì∑\n\n<img src=\"https://otavio.cc/uploads/2021/56aadbed23.jpg\" width=\"600\" height=\"400\" alt=\"\" />\n",
				"date_published": "2021-12-12T14:51:57+02:00",
				"url": "https://otavio.cc/2021/12/12/fog.html",
				"tags": ["photography"]
			},
			{
				"id": "http://otaviocc.micro.blog/2021/12/12/i-learned-vim.html",
				
				"content_html": "<p>I learned <a href=\"https://www.vim.org\">Vim</a> 22 years ago and I still use it on a daily basis. That&rsquo;s insane üë®‚Äçüíª</p>\n",
				"content_text": "I learned [Vim](https://www.vim.org) 22 years ago and I still use it on a daily basis. That's insane üë®‚Äçüíª\n",
				"date_published": "2021-12-12T08:03:08+02:00",
				"url": "https://otavio.cc/2021/12/12/i-learned-vim.html",
				"tags": ["programming","productivity"]
			},
			{
				"id": "http://otaviocc.micro.blog/2021/12/10/eight-more-quickspecs.html",
				
				"content_html": "<p>Eight more <code>QuickSpecs</code> to convert to <code>XCTests</code> and we can remove Quick and Nimble from the project üë®‚Äçüíª</p>\n",
				"content_text": "Eight more `QuickSpecs` to convert to `XCTests` and we can remove Quick and Nimble from the project üë®‚Äçüíª\n",
				"date_published": "2021-12-10T05:17:35+02:00",
				"url": "https://otavio.cc/2021/12/10/eight-more-quickspecs.html",
				"tags": ["programming"]
			},
			{
				"id": "http://otaviocc.micro.blog/2021/12/07/every-single-morning.html",
				
				"content_html": "<p>Every single morning he goes outside for about 30 seconds to check the weather and then jumps on the sofa üì∑ ‚ùÑÔ∏è</p>\n<!-- raw HTML omitted -->\n",
				"content_text": "Every single morning he goes outside for about 30 seconds to check the weather and then jumps on the sofa üì∑ ‚ùÑÔ∏è\n\n<img src=\"https://otavio.cc/uploads/2021/ece63ed7ce.jpg\" width=\"600\" height=\"400\" alt=\"\" />\n",
				"date_published": "2021-12-07T23:49:00+02:00",
				"url": "https://otavio.cc/2021/12/07/every-single-morning.html",
				"tags": ["photography"]
			},
			{
				"id": "http://otaviocc.micro.blog/2021/12/06/comfort-food-contact.html",
				
				"content_html": "<p>&ldquo;Comfort food&rdquo; üìö üì∑</p>\n<ol>\n<li><a href=\"https://micro.blog/books/9781501197987\">Contact</a> by Carl Sagan</li>\n<li><a href=\"https://micro.blog/books/9780345538987\">Jurassic Park</a> by Michael Crichton</li>\n<li><a href=\"https://micro.blog/books/9780345539014\">Timeline</a> by Michael Crichton</li>\n</ol>\n<!-- raw HTML omitted -->\n",
				"content_text": "\"Comfort food\" üìö üì∑\r\n\r\n1. [Contact](https://micro.blog/books/9781501197987) by Carl Sagan\r\n2. [Jurassic Park](https://micro.blog/books/9780345538987) by Michael Crichton\r\n3. [Timeline](https://micro.blog/books/9780345539014) by Michael Crichton\n\n<img src=\"https://otavio.cc/uploads/2021/fc0b0c466d.jpg\" width=\"600\" height=\"400\" alt=\"\" />\n",
				"date_published": "2021-12-07T00:11:59+02:00",
				"url": "https://otavio.cc/2021/12/06/comfort-food-contact.html",
				"tags": ["photography","book"]
			},
			{
				"id": "http://otaviocc.micro.blog/2021/11/29/black-friday.html",
				
				"content_html": "<p>&ldquo;Black Friday&rdquo; üì∑</p>\n<!-- raw HTML omitted -->\n",
				"content_text": "\"Black Friday\" üì∑\n\n<img src=\"https://otavio.cc/uploads/2021/3ac787765b.jpg\" width=\"600\" height=\"400\" alt=\"\" />\n",
				"date_published": "2021-11-29T17:38:40+02:00",
				"url": "https://otavio.cc/2021/11/29/black-friday.html",
				"tags": ["photography"]
			},
			{
				"id": "http://otaviocc.micro.blog/2021/11/27/pixelmator-pro-is.html",
				
				"content_html": "<p><a href=\"https://apps.apple.com/de/app/pixelmator-pro/id1289583905?mt=12\">Pixelmator Pro</a> is 50% off, but I don&rsquo;t know if it&rsquo;s worth. I currently have Darkroom which suffices my needs, but at the same time I really like the original Pixelmator app üì∑</p>\n",
				"content_text": "[Pixelmator Pro](https://apps.apple.com/de/app/pixelmator-pro/id1289583905?mt=12) is 50% off, but I don't know if it's worth. I currently have Darkroom which suffices my needs, but at the same time I really like the original Pixelmator app üì∑\n",
				"date_published": "2021-11-27T14:30:48+02:00",
				"url": "https://otavio.cc/2021/11/27/pixelmator-pro-is.html",
				"tags": ["photography"]
			},
			{
				"id": "http://otaviocc.micro.blog/2021/11/27/every-now-and.html",
				
				"content_html": "<p>Every now and then I reset my camera to default settings. Ever time I do this I learn something new about my camera üì∑</p>\n",
				"content_text": "Every now and then I reset my camera to default settings. Ever time I do this I learn something new about my camera üì∑\n",
				"date_published": "2021-11-27T10:22:00+02:00",
				"url": "https://otavio.cc/2021/11/27/every-now-and.html",
				"tags": ["photography"]
			},
			{
				"id": "http://otaviocc.micro.blog/2021/11/25/we-have-a.html",
				
				"content_html": "<p>We have a new home in the macOS App Store for the <a href=\"https://apps.apple.com/app/nordvpn-vpn-fast-secure/id905953485\">NordVPN</a> app, and we&rsquo;re sharing it with the iOS folks. One centralized page for both apps improves discoverability a lot üë®‚Äçüíª</p>\n",
				"content_text": "We have a new home in the macOS App Store for the [NordVPN](https://apps.apple.com/app/nordvpn-vpn-fast-secure/id905953485) app, and we're sharing it with the iOS folks. One centralized page for both apps improves discoverability a lot üë®‚Äçüíª\n",
				"date_published": "2021-11-25T15:12:55+02:00",
				"url": "https://otavio.cc/2021/11/25/we-have-a.html",
				"tags": ["internet"]
			},
			{
				"id": "http://otaviocc.micro.blog/2021/11/19/microblog-users-can.html",
				
				"content_html": "<p><a href=\"micro.blog\">Micro.blog</a> users can use their <a href=\"https://glass.photo\">Glass</a> feed to <a href=\"https://micro.blog/account/feeds\">automatically add photos</a> to their Micro.blog timeline! üì∑ üë®‚Äçüíª</p>\n",
				"content_text": "[Micro.blog](micro.blog) users can use their [Glass](https://glass.photo) feed to [automatically add photos](https://micro.blog/account/feeds) to their Micro.blog timeline! üì∑ üë®‚Äçüíª\n",
				"date_published": "2021-11-19T15:54:40+02:00",
				"url": "https://otavio.cc/2021/11/19/microblog-users-can.html",
				"tags": ["photography"]
			},
			{
				"id": "http://otaviocc.micro.blog/2021/11/19/its-possible-to.html",
				
				"content_html": "<p>It&rsquo;s possible to follow <a href=\"https://glass.photo\">Glass</a> users using <a href=\"https://netnewswire.com\">NetNewsWire</a> (or any other feed reader) as long as they have a public profile page. The photos on their feed have a really good quality, way better than those from Flickr&rsquo;s feeds üì∑ üë®‚Äçüíª</p>\n",
				"content_text": "It's possible to follow [Glass](https://glass.photo) users using [NetNewsWire](https://netnewswire.com) (or any other feed reader) as long as they have a public profile page. The photos on their feed have a really good quality, way better than those from Flickr's feeds üì∑ üë®‚Äçüíª\n",
				"date_published": "2021-11-19T15:51:59+02:00",
				"url": "https://otavio.cc/2021/11/19/its-possible-to.html",
				"tags": ["photography"]
			},
			{
				"id": "http://otaviocc.micro.blog/2021/11/19/i-really-want.html",
				
				"content_html": "<p>I really want <a href=\"https://glass.photo\">Glass</a> to succeed, so I&rsquo;m going for the annual subscription üë®‚Äçüíª üì∑</p>\n",
				"content_text": "I really want [Glass](https://glass.photo) to succeed, so I'm going for the annual subscription üë®‚Äçüíª üì∑\n",
				"date_published": "2021-11-19T15:48:08+02:00",
				"url": "https://otavio.cc/2021/11/19/i-really-want.html",
				"tags": ["photography"]
			},
			{
				"id": "http://otaviocc.micro.blog/2021/11/18/im-moving-this.html",
				
				"content_html": "<p>I&rsquo;m moving this book to the top of the pile: <a href=\"https://micro.blog/books/9781732102200\">A Philosophy of Software Design</a> by John Ousterhout üìö I was told it&rsquo;s really good.</p>\n",
				"content_text": "I'm moving this book to the top of the pile: [A Philosophy of Software Design](https://micro.blog/books/9781732102200) by John Ousterhout üìö I was told it's really good.\n",
				"date_published": "2021-11-18T01:41:39+02:00",
				"url": "https://otavio.cc/2021/11/18/im-moving-this.html",
				"tags": ["book"]
			},
			{
				"id": "http://otaviocc.micro.blog/2021/11/17/i-really-dislike.html",
				
				"content_html": "<p>I really dislike having to write workarounds, but there&rsquo;s a macOS Monterey bug affecting my application and I&rsquo;ll have to handle it by writing more code than needed üë®‚Äçüíª</p>\n",
				"content_text": "I really dislike having to write workarounds, but there's a macOS Monterey bug affecting my application and I'll have to handle it by writing more code than needed üë®‚Äçüíª\n",
				"date_published": "2021-11-17T12:35:00+02:00",
				"url": "https://otavio.cc/2021/11/17/i-really-dislike.html",
				"tags": ["programming"]
			},
			{
				"id": "http://otaviocc.micro.blog/2021/11/14/the-best-thing.html",
				
				"content_html": "<p>The best thing about not having Twitter and Instagram on the phone is that I open <a href=\"https://netnewswire.com\">NetNewsWire</a>, <a href=\"https://micro.blog\">Micro.blog</a>, and <a href=\"http://glass.photo\">Glass</a> more often ü§ì</p>\n",
				"content_text": "The best thing about not having Twitter and Instagram on the phone is that I open [NetNewsWire](https://netnewswire.com), [Micro.blog](https://micro.blog), and [Glass](http://glass.photo) more often ü§ì\n",
				"date_published": "2021-11-14T17:06:52+02:00",
				"url": "https://otavio.cc/2021/11/14/the-best-thing.html",
				"tags": ["photography","internet","blog"]
			},
			{
				"id": "http://otaviocc.micro.blog/2021/11/13/we-cant-use.html",
				
				"content_html": "<p>We can&rsquo;t use <a href=\"https://developer.apple.com/documentation/combine\">Combine</a> since it&rsquo;s macOS 10.15+ and we ship our product starting with version 10.12. I&rsquo;m currently experimenting with <a href=\"https://github.com/OpenCombine/OpenCombine\">OpenCombine</a> to see if it&rsquo;s a good solution for now. Otherwise I&rsquo;ll use my custom lightweight binding solution (kinda compatible with Combine) üë®‚Äçüíª</p>\n",
				"content_text": "We can't use [Combine](https://developer.apple.com/documentation/combine) since it's macOS 10.15+ and we ship our product starting with version 10.12. I'm currently experimenting with [OpenCombine](https://github.com/OpenCombine/OpenCombine) to see if it's a good solution for now. Otherwise I'll use my custom lightweight binding solution (kinda compatible with Combine) üë®‚Äçüíª\n",
				"date_published": "2021-11-14T00:56:59+02:00",
				"url": "https://otavio.cc/2021/11/13/we-cant-use.html",
				"tags": ["programming"]
			},
			{
				"id": "http://otaviocc.micro.blog/2021/11/13/i-need-a.html",
				
				"content_html": "<p>I need a good system to organize my photos. Gonna start adding keywords everytime I add them to the library üì∑ üë®‚Äçüíª</p>\n",
				"content_text": "I need a good system to organize my photos. Gonna start adding keywords everytime I add them to the library üì∑ üë®‚Äçüíª\n",
				"date_published": "2021-11-13T11:11:18+02:00",
				"url": "https://otavio.cc/2021/11/13/i-need-a.html",
				"tags": ["photography"]
			},
			{
				"id": "http://otaviocc.micro.blog/2021/11/12/ive-used-cedar.html",
				
				"content_html": "<p>I&rsquo;ve used <a href=\"https://github.com/cedarbdd/cedar\">Cedar</a> for three years, and <a href=\"https://github.com/specta/specta\">Specta</a> and <a href=\"https://github.com/quick/quick\">Quick</a> for another three. You didn&rsquo;t hear this from me, but I love pure <a href=\"https://developer.apple.com/documentation/xctest\">XCTests</a> üë®‚Äçüíª</p>\n",
				"content_text": "I've used [Cedar](https://github.com/cedarbdd/cedar) for three years, and [Specta](https://github.com/specta/specta) and [Quick](https://github.com/quick/quick) for another three. You didn't hear this from me, but I love pure [XCTests](https://developer.apple.com/documentation/xctest) üë®‚Äçüíª\n",
				"date_published": "2021-11-12T16:02:00+02:00",
				"url": "https://otavio.cc/2021/11/12/ive-used-cedar.html",
				"tags": ["programming"]
			},
			{
				"id": "http://otaviocc.micro.blog/2021/11/11/so-usps-and.html",
				
				"content_html": "<p>So, USPS and Deutsche Post, which one of you lost my <a href=\"https://fieldnotesbrand.com\">Field Notes</a> subscription box? üò†</p>\n",
				"content_text": "So, USPS and Deutsche Post, which one of you lost my [Field Notes](https://fieldnotesbrand.com) subscription box? üò†\n",
				"date_published": "2021-11-11T18:52:50+02:00",
				"url": "https://otavio.cc/2021/11/11/so-usps-and.html"
			},
			{
				"id": "http://otaviocc.micro.blog/2021/11/10/my-bank-gave.html",
				
				"content_html": "<p>üé∂ My bank gave me four months of Apple Music (in addition to those three from Apple). The Music app on the computer isn&rsquo;t great; it&rsquo;s pretty much a messy iTunes. But the app on iOS and the integration with Home Pod is great. After ten years it&rsquo;s time to say bye to Spotify.</p>\n",
				"content_text": "üé∂ My bank gave me four months of Apple Music (in addition to those three from Apple). The Music app on the computer isn't great; it's pretty much a messy iTunes. But the app on iOS and the integration with Home Pod is great. After ten years it's time to say bye to Spotify.\n",
				"date_published": "2021-11-10T20:46:42+02:00",
				"url": "https://otavio.cc/2021/11/10/my-bank-gave.html",
				"tags": ["music"]
			},
			{
				"id": "http://otaviocc.micro.blog/2021/11/10/i-cant-use.html",
				
				"content_html": "<p>I can&rsquo;t use the same wallpaper for more than three days.</p>\n",
				"content_text": "I can't use the same wallpaper for more than three days.\n",
				"date_published": "2021-11-10T20:40:50+02:00",
				"url": "https://otavio.cc/2021/11/10/i-cant-use.html"
			},
			{
				"id": "http://otaviocc.micro.blog/2021/11/10/i-upgraded-my.html",
				
				"content_html": "<p>I upgraded my data plan on the phone. I don&rsquo;t have to worry about streaming music and using my computer when on the go ü§ì</p>\n",
				"content_text": "I upgraded my data plan on the phone. I don't have to worry about streaming music and using my computer when on the go ü§ì\n",
				"date_published": "2021-11-10T12:54:37+02:00",
				"url": "https://otavio.cc/2021/11/10/i-upgraded-my.html",
				"tags": ["productivity","music","internet"]
			},
			{
				"id": "http://otaviocc.micro.blog/2021/11/07/i-cant-believe.html",
				
				"content_html": "<p>I can&rsquo;t believe it&rsquo;s almost 2022 and Flickr is still the best platform for amateur - and pro? - photographers üì∑</p>\n",
				"content_text": "I can't believe it's almost 2022 and Flickr is still the best platform for amateur - and pro? - photographers üì∑\n",
				"date_published": "2021-11-07T02:07:01+02:00",
				"url": "https://otavio.cc/2021/11/07/i-cant-believe.html",
				"tags": ["photography"]
			},
			{
				"id": "http://otaviocc.micro.blog/2021/11/07/glasmll.html",
				
				"content_html": "<p>Glasm√ºll</p>\n<!-- raw HTML omitted -->\n",
				"content_text": "Glasm√ºll\n\n<img src=\"https://otavio.cc/uploads/2021/de984ae285.jpg\" width=\"600\" height=\"400\" alt=\"\" />\n",
				"date_published": "2021-11-07T01:34:02+02:00",
				"url": "https://otavio.cc/2021/11/07/glasmll.html",
				"tags": ["photography"]
			},
			{
				"id": "http://otaviocc.micro.blog/2021/11/04/ive-started-laying.html",
				
				"content_html": "<p>I&rsquo;ve started laying out what I want in my Micro.blog application. I don&rsquo;t have much time to work on it as I wish I had, but I&rsquo;ll get there. It won&rsquo;t be named MicroUI, this name&rsquo;s just because I had to name the project üë®‚Äçüíª</p>\n<!-- raw HTML omitted -->\n",
				"content_text": "I've started laying out what I want in my Micro.blog application. I don't have much time to work on it as I wish I had, but I'll get there. It won't be named MicroUI, this name's just because I had to name the project üë®‚Äçüíª\n\n<img src=\"https://otavio.cc/uploads/2021/fd40e69f3e.png\" width=\"600\" height=\"406\" alt=\"\" />\n",
				"date_published": "2021-11-04T09:46:00+02:00",
				"url": "https://otavio.cc/2021/11/04/ive-started-laying.html",
				"tags": ["photography"]
			},
			{
				"id": "http://otaviocc.micro.blog/2021/11/03/i-like-bear.html",
				
				"content_html": "<p>I like <a href=\"https://bear.app\">Bear</a>, but I wish there was something more powerful I could use instead. The only problem is that the alternatives don&rsquo;t have good syntax highlight for code blocks, which is something I definitely need.</p>\n",
				"content_text": "I like [Bear](https://bear.app), but I wish there was something more powerful I could use instead. The only problem is that the alternatives don't have good syntax highlight for code blocks, which is something I definitely need.\n",
				"date_published": "2021-11-03T11:09:03+02:00",
				"url": "https://otavio.cc/2021/11/03/i-like-bear.html",
				"tags": ["productivity"]
			},
			{
				"id": "http://otaviocc.micro.blog/2021/11/01/the-microblog-api.html",
				
				"content_html": "<p>The Micro.blog API Client I&rsquo;m writing consists of two parts: a Swift Package with the <a href=\"https://github.com/otaviocc/MicroClient\">MicroClient</a>, a generic/lightweight network client which can be used in completely unrelated projects, and <a href=\"https://github.com/otaviocc/MicroAPI\">MicroAPI</a>, the Micro.blog API wrapper, which uses the MicroClient underneath üë®‚Äçüíª</p>\n",
				"content_text": "The Micro.blog API Client I'm writing consists of two parts: a Swift Package with the [MicroClient](https://github.com/otaviocc/MicroClient), a generic/lightweight network client which can be used in completely unrelated projects, and [MicroAPI](https://github.com/otaviocc/MicroAPI), the Micro.blog API wrapper, which uses the MicroClient underneath üë®‚Äçüíª\n",
				"date_published": "2021-11-01T15:15:11+02:00",
				"url": "https://otavio.cc/2021/11/01/the-microblog-api.html",
				"tags": ["programming","blog"]
			},
			{
				"id": "http://otaviocc.micro.blog/2021/11/01/i-tried-to.html",
				
				"content_html": "<p>I tried to make my Micro.blog API Client with simple - yet testable - interfaces üë®‚Äçüíª. Uploading a photo&rsquo;s straight-forward:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#a90d91\">let</span> <span style=\"color:#000\">mediaRequest</span> = <span style=\"color:#000\">MicropubRequestFactory</span>.<span style=\"color:#000\">makeUploadRequest</span>(\n    <span style=\"color:#000\">media</span>: .<span style=\"color:#000\">jpeg</span>(<span style=\"color:#000\">jpegData</span>)\n)\n<span style=\"color:#a90d91\">let</span> <span style=\"color:#000\">uploadResponse</span> = <span style=\"color:#a90d91\">try</span> <span style=\"color:#000\">await</span> <span style=\"color:#000\">client</span>.<span style=\"color:#000\">run</span>(<span style=\"color:#000\">mediaRequest</span>)\n</code></pre></div>",
				"content_text": "I tried to make my Micro.blog API Client with simple - yet testable - interfaces üë®‚Äçüíª. Uploading a photo's straight-forward:\n\n```swift\nlet mediaRequest = MicropubRequestFactory.makeUploadRequest(\n    media: .jpeg(jpegData)\n)\nlet uploadResponse = try await client.run(mediaRequest)\n```\n",
				"date_published": "2021-11-01T15:08:00+02:00",
				"url": "https://otavio.cc/2021/11/01/i-tried-to.html",
				"tags": ["programming"]
			},
			{
				"id": "http://otaviocc.micro.blog/2021/10/31/im-adding-photo.html",
				
				"content_html": "<p>I&rsquo;m adding photo upload support to my Micro.blog API client. After that I can finally work on the macOS and iOS clients üë®‚Äçüíª</p>\n",
				"content_text": "I'm adding photo upload support to my Micro.blog API client. After that I can finally work on the macOS and iOS clients üë®‚Äçüíª\n",
				"date_published": "2021-11-01T00:36:23+02:00",
				"url": "https://otavio.cc/2021/10/31/im-adding-photo.html",
				"tags": ["programming","blog"]
			},
			{
				"id": "http://otaviocc.micro.blog/2021/10/28/youll-be-missed.html",
				
				"content_html": "<p>You&rsquo;ll be missed, my friend. Love you.</p>\n<!-- raw HTML omitted -->\n",
				"content_text": "You'll be missed, my friend. Love you.\n\n<img src=\"https://otavio.cc/uploads/2021/73ba61b16b.jpg\" width=\"600\" height=\"398\" alt=\"\" />\n",
				"date_published": "2021-10-28T23:46:40+02:00",
				"url": "https://otavio.cc/2021/10/28/youll-be-missed.html",
				"tags": ["photography"]
			},
			{
				"id": "http://otaviocc.micro.blog/2021/10/26/i-just-finished.html",
				
				"content_html": "<p>I just finished building the <a href=\"https://www.lego.com/en-us/aboutus/news/2021/september/lego-ideas-fender-stratocaster-set\">LEGO Fender Stratocaster</a>. This set is fantastic. The attention to details is insane. Love it üé∏</p>\n<!-- raw HTML omitted -->\n",
				"content_text": "I just finished building the [LEGO Fender Stratocaster](https://www.lego.com/en-us/aboutus/news/2021/september/lego-ideas-fender-stratocaster-set). This set is fantastic. The attention to details is insane. Love it üé∏\n\n<img src=\"https://otavio.cc/uploads/2021/ec49dd7a16.jpg\" width=\"600\" height=\"400\" alt=\"\" />\n",
				"date_published": "2021-10-26T23:28:58+02:00",
				"url": "https://otavio.cc/2021/10/26/i-just-finished.html",
				"tags": ["photography"]
			},
			{
				"id": "http://otaviocc.micro.blog/2021/10/26/things-is-by.html",
				
				"content_html": "<p><a href=\"https://culturedcode.com/things/\">Things</a> is by far my favorite task manager. I&rsquo;ve tried so many apps and methods, but Things&rsquo;s the only one I consistently use. <a href=\"https://culturedcode.com/things/blog/2021/10/all-things-speed/\">Their latest update</a> integrates with macOS Monterey&rsquo;s Shortcuts making it even easier to capture tasks.</p>\n",
				"content_text": "[Things](https://culturedcode.com/things/) is by far my favorite task manager. I've tried so many apps and methods, but Things's the only one I consistently use. [Their latest update](https://culturedcode.com/things/blog/2021/10/all-things-speed/) integrates with macOS Monterey's Shortcuts making it even easier to capture tasks.\n",
				"date_published": "2021-10-26T14:10:03+02:00",
				"url": "https://otavio.cc/2021/10/26/things-is-by.html",
				"tags": ["productivity"]
			},
			{
				"id": "http://otaviocc.micro.blog/2021/10/25/i-wish-i.html",
				
				"content_html": "<p>I wish I could update all my devices today, but Internet in Germany doesn&rsquo;t help.</p>\n",
				"content_text": "I wish I could update all my devices today, but Internet in Germany doesn't help.\n",
				"date_published": "2021-10-25T23:34:35+02:00",
				"url": "https://otavio.cc/2021/10/25/i-wish-i.html",
				"tags": ["internet"]
			},
			{
				"id": "http://otaviocc.micro.blog/2021/10/24/microapi-isnt-ready.html",
				
				"content_html": "<p><a href=\"https://github.com/otaviocc/MicroAPI\">MicroAPI</a> isn&rsquo;t ready yet but I pushed it to GitHub anyway. I decided to split the API client and the network client and published the <a href=\"https://github.com/otaviocc/MicroClient\">network client</a> in a different repository.  The network client knows nothing about MicroAPI and can be reused for different projects üë®‚Äçüíª</p>\n",
				"content_text": "[MicroAPI](https://github.com/otaviocc/MicroAPI) isn't ready yet but I pushed it to GitHub anyway. I decided to split the API client and the network client and published the [network client](https://github.com/otaviocc/MicroClient) in a different repository.  The network client knows nothing about MicroAPI and can be reused for different projects üë®‚Äçüíª\n",
				"date_published": "2021-10-24T21:30:20+02:00",
				"url": "https://otavio.cc/2021/10/24/microapi-isnt-ready.html",
				"tags": ["programming","blog"]
			},
			{
				"id": "http://otaviocc.micro.blog/2021/10/24/went-for-a.html",
				
				"content_html": "<p>Went for a long walk today and took my üì∑ with me. I took tons of pictures and hated every single one of them. I tried some of the film simuations from <a href=\"https://fujixweekly.com\">Fuji X Weekly</a>, but I wasn&rsquo;t well prepared. I have to do more trips like this, to practice more.</p>\n",
				"content_text": "Went for a long walk today and took my üì∑ with me. I took tons of pictures and hated every single one of them. I tried some of the film simuations from [Fuji X Weekly](https://fujixweekly.com), but I wasn't well prepared. I have to do more trips like this, to practice more.\n",
				"date_published": "2021-10-24T21:18:07+02:00",
				"url": "https://otavio.cc/2021/10/24/went-for-a.html",
				"tags": ["photography"]
			},
			{
				"id": "http://otaviocc.micro.blog/2021/10/22/i-have-a.html",
				
				"content_html": "<p>I have a Fuji X and just learned about <a href=\"https://fujixweekly.com/2021/10/17/the-fuji-x-weekly-story/\">this website</a>. I wanna go home to play with my camera settings and custom <a href=\"https://fujixweekly.com/2020/11/18/how-to-add-film-simulation-recipes-to-your-fujifilm-camera/\">Film Simulation </a> üì∑</p>\n",
				"content_text": "I have a Fuji X and just learned about [this website](https://fujixweekly.com/2021/10/17/the-fuji-x-weekly-story/). I wanna go home to play with my camera settings and custom [Film Simulation ](https://fujixweekly.com/2020/11/18/how-to-add-film-simulation-recipes-to-your-fujifilm-camera/) üì∑\n",
				"date_published": "2021-10-22T11:52:52+02:00",
				"url": "https://otavio.cc/2021/10/22/i-have-a.html",
				"tags": ["photography"]
			},
			{
				"id": "http://otaviocc.micro.blog/2021/10/21/diablo-ii-resurrected.html",
				
				"content_html": "<p><a href=\"https://www.nintendo.com/games/detail/diablo-ii-resurrected-switch/\">Diablo II: Resurrected</a> is pure disappointment. I have to be online even if I want to play solo, which is a big problem since Blizzard is having a hard time to <a href=\"https://us.forums.blizzard.com/en/d2r/t/diablo-ii-resurrected-outages-an-explanation-how-we%E2%80%99ve-been-working-on-it-and-how-we%E2%80%99re-moving-forward/28164\">keep its servers up</a> üéÆ</p>\n",
				"content_text": "[Diablo II: Resurrected](https://www.nintendo.com/games/detail/diablo-ii-resurrected-switch/) is pure disappointment. I have to be online even if I want to play solo, which is a big problem since Blizzard is having a hard time to [keep its servers up](https://us.forums.blizzard.com/en/d2r/t/diablo-ii-resurrected-outages-an-explanation-how-we%E2%80%99ve-been-working-on-it-and-how-we%E2%80%99re-moving-forward/28164) üéÆ\n",
				"date_published": "2021-10-21T19:56:41+02:00",
				"url": "https://otavio.cc/2021/10/21/diablo-ii-resurrected.html",
				"tags": ["game"]
			},
			{
				"id": "http://otaviocc.micro.blog/2021/10/20/i-deleted-twitter.html",
				
				"content_html": "<p>I deleted Twitter (Tweetbot), Instagram, and Reddit (Apollo) from my phone. The only social networks I still have installed are Mastodon and Micro.blog.  I don‚Äôt have any plans to delete those accounts, tho. Will just stop using them üï∏</p>\n",
				"content_text": "I deleted Twitter (Tweetbot), Instagram, and Reddit (Apollo) from my phone. The only social networks I still have installed are Mastodon and Micro.blog.  I don‚Äôt have any plans to delete those accounts, tho. Will just stop using them üï∏\n",
				"date_published": "2021-10-20T14:45:01+02:00",
				"url": "https://otavio.cc/2021/10/20/i-deleted-twitter.html",
				"tags": ["internet"]
			},
			{
				"id": "http://otaviocc.micro.blog/2021/10/20/i-see-this.html",
				
				"content_html": "<p>I see this car everytime I walk in this neighborhood üöó üì∑</p>\n<!-- raw HTML omitted -->\n",
				"content_text": "I see this car everytime I walk in this neighborhood üöó üì∑\n\n<img src=\"https://otavio.cc/uploads/2021/08e52a4dd5.jpg\" width=\"600\" height=\"400\" alt=\"Tiny yellow car parked\" />\n",
				"date_published": "2021-10-20T08:29:10+02:00",
				"url": "https://otavio.cc/2021/10/20/i-see-this.html",
				"tags": ["photography"]
			},
			{
				"id": "http://otaviocc.micro.blog/2021/10/20/apples-new-computers.html",
				
				"content_html": "<p>Apple&rsquo;s new computers look amazing, but it&rsquo;s hard to justify buying one. The most <em>basic</em> 14&quot; model costs $1,999 in the US (before taxes), while the same model costs 2.249 ‚Ç¨ or $2,600+ in Germany. At least I&rsquo;m not in Brazil, where it costs $4,900+ (27x the country&rsquo;s minimum wage).</p>\n",
				"content_text": "Apple's new computers look amazing, but it's hard to justify buying one. The most _basic_ 14\" model costs $1,999 in the US (before taxes), while the same model costs 2.249 ‚Ç¨ or $2,600+ in Germany. At least I'm not in Brazil, where it costs $4,900+ (27x the country's minimum wage).\n",
				"date_published": "2021-10-20T08:14:34+02:00",
				"url": "https://otavio.cc/2021/10/20/apples-new-computers.html"
			},
			{
				"id": "http://otaviocc.micro.blog/2021/10/19/a-few-weeks.html",
				
				"content_html": "<p>A few weeks ago I decided to download all the photos I have on Instagram (<code>Settings &gt; Security &gt; Download Data</code>). The next step is to remove all the pictures from there and delete the app from my phone.</p>\n",
				"content_text": "A few weeks ago I decided to download all the photos I have on Instagram (`Settings > Security > Download Data`). The next step is to remove all the pictures from there and delete the app from my phone.\n",
				"date_published": "2021-10-19T14:34:19+02:00",
				"url": "https://otavio.cc/2021/10/19/a-few-weeks.html",
				"tags": ["photography","internet"]
			},
			{
				"id": "http://otaviocc.micro.blog/2021/10/19/in-i-had.html",
				
				"content_html": "<p>In 2003/4 I had a side-project where I was using <a href=\"https://en.wikipedia.org/wiki/Linkback\">linkback</a> to build a platform people could publish book reviews by writing posts on their own blogs. It was called Spectacles and was deployed and working. But then I listened to a friend who said &ldquo;people don&rsquo;t read books anymore&hellip;&rdquo;</p>\n",
				"content_text": "In 2003/4 I had a side-project where I was using [linkback](https://en.wikipedia.org/wiki/Linkback) to build a platform people could publish book reviews by writing posts on their own blogs. It was called Spectacles and was deployed and working. But then I listened to a friend who said \"people don't read books anymore...\"\n",
				"date_published": "2021-10-19T01:53:00+02:00",
				"url": "https://otavio.cc/2021/10/19/in-i-had.html",
				"tags": ["internet","blog"]
			},
			{
				"id": "http://otaviocc.micro.blog/2021/10/17/the-first-part.html",
				
				"content_html": "<p>The first part of my micro.blog API Client in Swift is implemented üë®‚Äçüíª. The API Client implements all the <code>/posts</code> methods from the <a href=\"https://help.micro.blog/t/json-api/97\">documentation</a>. Later today I&rsquo;m gonna work on the <code>/users</code> methods.</p>\n",
				"content_text": "The first part of my micro.blog API Client in Swift is implemented üë®‚Äçüíª. The API Client implements all the `/posts` methods from the [documentation](https://help.micro.blog/t/json-api/97). Later today I'm gonna work on the `/users` methods.\n",
				"date_published": "2021-10-17T17:54:00+02:00",
				"url": "https://otavio.cc/2021/10/17/the-first-part.html",
				"tags": ["programming"]
			},
			{
				"id": "http://otaviocc.micro.blog/2021/10/17/i-was-planing.html",
				
				"content_html": "<p>I was planing to use Swift&rsquo;s <a href=\"https://developer.apple.com/videos/play/wwdc2021/10132\">async/await</a> for my micro.blog API client, but I&rsquo;m gonna stick to Combine for now. Apple&rsquo;s new APIs require iOS 15.0+ and macOS 12.0+ üë®‚Äçüíª</p>\n",
				"content_text": "I was planing to use Swift's [async/await](https://developer.apple.com/videos/play/wwdc2021/10132) for my micro.blog API client, but I'm gonna stick to Combine for now. Apple's new APIs require iOS 15.0+ and macOS 12.0+ üë®‚Äçüíª\n",
				"date_published": "2021-10-17T01:15:31+02:00",
				"url": "https://otavio.cc/2021/10/17/i-was-planing.html",
				"tags": ["programming"]
			},
			{
				"id": "http://otaviocc.micro.blog/2021/10/16/finished-reading-the.html",
				
				"content_html": "<p>Finished reading: <a href=\"https://micro.blog/books/9780358126607\">The 99% Invisible City: A Field Guide to the Hidden World of Everyday Design</a> by Roman Mars üìö. <a href=\"https://99percentinvisible.org\">99% Invisible</a> is by far my favorite podcast, and their book is a must-read.</p>\n",
				"content_text": "Finished reading: [The 99% Invisible City: A Field Guide to the Hidden World of Everyday Design](https://micro.blog/books/9780358126607) by Roman Mars üìö. [99% Invisible](https://99percentinvisible.org) is by far my favorite podcast, and their book is a must-read.\n",
				"date_published": "2021-10-16T16:56:53+02:00",
				"url": "https://otavio.cc/2021/10/16/finished-reading-the.html",
				"tags": ["book"]
			},
			{
				"id": "http://otaviocc.micro.blog/2021/10/16/im-looking-forward.html",
				
				"content_html": "<p>I&rsquo;m looking forward to upgrading to macOS Monterey üë®‚Äçüíª. I tried to use <a href=\"https://developer.apple.com/videos/play/wwdc2021/10212/\">Instruments to inspect HTTP traffic</a> this morning, but it requires iOS 15 and macOS Monterey to work.</p>\n",
				"content_text": "I'm looking forward to upgrading to macOS Monterey üë®‚Äçüíª. I tried to use [Instruments to inspect HTTP traffic](https://developer.apple.com/videos/play/wwdc2021/10212/) this morning, but it requires iOS 15 and macOS Monterey to work.\n",
				"date_published": "2021-10-16T12:39:43+02:00",
				"url": "https://otavio.cc/2021/10/16/im-looking-forward.html",
				"tags": ["programming","productivity"]
			},
			{
				"id": "http://otaviocc.micro.blog/2021/10/15/i-just-watched.html",
				
				"content_html": "<p>I just watched the Animal Crossing Direct presentation. I need more hours in my days‚Ä¶ üéÆ</p>\n",
				"content_text": "I just watched the Animal Crossing Direct presentation. I need more hours in my days‚Ä¶ üéÆ\n",
				"date_published": "2021-10-15T23:31:32+02:00",
				"url": "https://otavio.cc/2021/10/15/i-just-watched.html",
				"tags": ["game"]
			},
			{
				"id": "http://otaviocc.micro.blog/2021/10/14/just-thinking-out.html",
				
				"content_html": "<p>Just thinking out loud, is there a demand for a Micro.blog API client in Swift? My plan would be to build an API client and later an Open Source native SwiftUI application for macOS and iOS.</p>\n",
				"content_text": "Just thinking out loud, is there a demand for a Micro.blog API client in Swift? My plan would be to build an API client and later an Open Source native SwiftUI application for macOS and iOS.\n",
				"date_published": "2021-10-14T15:34:00+02:00",
				"url": "https://otavio.cc/2021/10/14/just-thinking-out.html",
				"tags": ["programming","blog"]
			},
			{
				"id": "http://otaviocc.micro.blog/2021/10/14/ive-added-a.html",
				
				"content_html": "<p>I&rsquo;ve added a <a href=\"https://otavio.cc/now/\">/now page</a> to my blog - check <a href=\"https://sive.rs/nowff\">/now page movement</a> to learn more. The /now page is a snapshot of one&rsquo;s life, with üìö one is reading, üéÆ one is playing, üíª ongoing projects, etc&hellip;</p>\n",
				"content_text": "I've added a [/now page](https://otavio.cc/now/) to my blog - check [/now page movement](https://sive.rs/nowff) to learn more. The /now page is a snapshot of one's life, with üìö one is reading, üéÆ one is playing, üíª ongoing projects, etc...\n",
				"date_published": "2021-10-14T15:32:00+02:00",
				"url": "https://otavio.cc/2021/10/14/ive-added-a.html",
				"tags": ["book","game"]
			},
			{
				"id": "http://otaviocc.micro.blog/2021/10/14/i-had-a.html",
				
				"content_html": "<p>I had a blog hosted on GitHub using Jekyll, but decided to start a <a href=\"https://otavio.cc\">new one using a Micro.blog&rsquo;s hosted blog</a>. I&rsquo;ll keep the old one in a different subdomain just for longer technical articles and will link them on my <a href=\"https://micro.blog/otaviocc\">micro.blog page</a>.</p>\n",
				"content_text": "I had a blog hosted on GitHub using Jekyll, but decided to start a [new one using a Micro.blog's hosted blog](https://otavio.cc). I'll keep the old one in a different subdomain just for longer technical articles and will link them on my [micro.blog page](https://micro.blog/otaviocc).\n",
				"date_published": "2021-10-14T14:44:00+02:00",
				"url": "https://otavio.cc/2021/10/14/i-had-a.html",
				"tags": ["productivity","blog"]
			},
			{
				"id": "http://otaviocc.micro.blog/2022/02/06/pair-programming-tdd.html",
				"title": "Pair Programming, TDD, and Rotation?",
				"content_html": "<p>For about three years I had the chance to work in the most interesting setup I experienced in my professional career. At first it might sound complicated to maintain, but trust me, it&rsquo;s not. The results speak for themselves.</p>\n<p><a href=\"https://en.wikipedia.org/wiki/Pair_programming\"><strong>Pair Programming</strong></a> for 8 hours per day. Working in pairs was the default in our <em>development team</em>, with rare exceptions such as someone on sick leave or in jury duty <sup id=\"fnref:1\"><a href=\"#fn:1\" class=\"footnote-ref\" role=\"doc-noteref\">1</a></sup>. Some might think Pair Programming is hard to achieve and questions such as &ldquo;<em>Who drives?</em>&rdquo;, &ldquo;<em>When is it the time to switch?</em>&rdquo; ‚Äú<em>What does one do while the other is coding?</em>‚Äù are always asked when I mention Pair Programming to someone not familiar with the technique.</p>\n<p>These questions are totally valid, and I risk to say I don&rsquo;t have the answers for an environment which doesn&rsquo;t do <a href=\"https://en.wikipedia.org/wiki/Test-driven_development\"><strong>Test Driven Development</strong></a> (TDD). Alongside Pair Programming, TDD was at the core of our culture. When in combination with Pair Programming, TDD defines the boundaries for the <em>driver</em> <sup id=\"fnref:2\"><a href=\"#fn:2\" class=\"footnote-ref\" role=\"doc-noteref\">2</a></sup>, making clear the moment engineers should switch: one writes a test, which should fail, and the other the code which makes the test pass. Once the test passes, the person who just implemented the code writes the next test so the <em>ping-pong</em> can continue. At the end of the day everyone ended up writing the same amount of code.</p>\n<p>While TDD helps to build better and structured code with clear contracts and interfaces <sup id=\"fnref:3\"><a href=\"#fn:3\" class=\"footnote-ref\" role=\"doc-noteref\">3</a></sup>, Pair Programming gives the chance to discuss every step of the process, from architectural to code design decisions.</p>\n<p>In a team of 10 engineers, pairing indefinitely with the same person wasn&rsquo;t an option for us. We wanted all the engineers to have the opportunity to work with each other, and in different areas of our mobile application (and <a href=\"https://duckduckgo.com/?q=Backend+for+Frontend+BFF\">Backend for Frontend</a>, BFF). So we had <strong>rotation</strong>. Two engineers would never pair for more than one consecutive day. If Alice and Bob are pairing today, tomorrow one of them hands over the position to Carol. If Alice gives her spot to Carol on the second day, the next move is Bob switching with Dave. on the third day.</p>\n<pre tabindex=\"0\"><code>Day 1:   Alice + Bob\nDay 2:           Bob + Carol\nDay 3:                 Carol + Dave\n</code></pre><p>The overlap is fundamental for knowledge transfer.</p>\n<p>Which brings me to another topic: <strong>Lanes</strong>. We had lanes of work, which are closer to <em>Epics</em> than <em>Missions</em> or <em>Verticals</em>. Lanes implement complete features and might exist from a couple of days to a few weeks and, in most cases, are completely independent from each other. E.g., photo backup, new settings menu, mosaics to make a collage of pictures, etc&hellip;</p>\n<p>Each engineer was in a lane for two days before jumping to another lane (thus the overlap for knowledge transfer in the example above).</p>\n<p>The benefits are obvious. While Pair Programming with TDD makes sure engineers are delivering the best at their best, rotation makes sure they have the whole picture of what they are putting in production (from engineering and product perspective).</p>\n<p>This setup promotes a feeling of shared ownership, where everyone is responsible for the product and technical decisions. The constant rotation also gives a chance to make adjustments to the technical choices made on previous days. It&rsquo;s always better to correct the direction sooner than later, reducing <em>technical debt</em>.</p>\n<p>Formal Code Review - e.g., via Pull Requests - doesn&rsquo;t exist in this setup. Code Review happens in real time by the pair working on the feature, and commits can be merged into the main branch at any time during the day (and multiple times in most cases).</p>\n<p>Having a shared ownership simplifies communication in the team, questions can be addressed by any person or pair at any time. Every engineer has all the knowledge and context to answer questions from the Product Owner, give/ask feedback to Designers, or interact with external teams. It also eliminates that feeling of &ldquo;<em>this is my code and I don&rsquo;t want anyone to touch it</em>&rdquo;.</p>\n<p>The last, but not least, important piece of the puzzle is the <a href=\"https://en.wikipedia.org/wiki/Pow_wow\">Pow Wow</a>. Whenever a pair would like to discuss something with other engineers, they would call for a Pow Wow. A ceremony as simple as everyone standing up to discuss a technical decision for 5-10 minutes. No formalities, no meeting rooms nor calendar invitations.</p>\n<p>Since we were all on the same page about technical topics, it was pretty easy to size User Stories during planning meetings. Almost three years working with the same team gave us confidence to perfectly size our 1-week sprints, simplifying our backlog refinement sessions and plannings. For our Product Owner this was extremely valuable in order to maintain the backlog relevant and prioritized.</p>\n<p>As a result we had a fast paced and united team, sharing every aspect of the development process, delivering high quality code with confidence, releasing updates every week, and supporting the Product Owner and Designers. We eliminated time waste by doing Code Review in real time, and technical debt by addressing <em>bad</em> choices sooner than later.</p>\n<p>Of course this is just part of the story, only covering our engineering ways of working. Equally important is the <em>partnership</em> with the Product Owner and Designers, but that&rsquo;s a topic for another post.</p>\n<section class=\"footnotes\" role=\"doc-endnotes\">\n<hr>\n<ol>\n<li id=\"fn:1\" role=\"doc-endnote\">\n<p>We had a list of chores in our backlog for when someone had to <em>solo</em>. Simple tickets with lower priority.&#160;<a href=\"#fnref:1\" class=\"footnote-backref\" role=\"doc-backlink\">&#x21a9;&#xfe0e;</a></p>\n</li>\n<li id=\"fn:2\" role=\"doc-endnote\">\n<p>We didn&rsquo;t use the terms <em>driver</em> and <em>navigator</em>. In fact, we didn&rsquo;t have names for these roles.&#160;<a href=\"#fnref:2\" class=\"footnote-backref\" role=\"doc-backlink\">&#x21a9;&#xfe0e;</a></p>\n</li>\n<li id=\"fn:3\" role=\"doc-endnote\">\n<p>I don&rsquo;t see TDD as a tool to write tests, but as a framework to help me to write better code.&#160;<a href=\"#fnref:3\" class=\"footnote-backref\" role=\"doc-backlink\">&#x21a9;&#xfe0e;</a></p>\n</li>\n</ol>\n</section>\n",
				"content_text": "For about three years I had the chance to work in the most interesting setup I experienced in my professional career. At first it might sound complicated to maintain, but trust me, it's not. The results speak for themselves.\n\n[**Pair Programming**](https://en.wikipedia.org/wiki/Pair_programming) for 8 hours per day. Working in pairs was the default in our *development team*, with rare exceptions such as someone on sick leave or in jury duty [^a]. Some might think Pair Programming is hard to achieve and questions such as \"*Who drives?*\", \"*When is it the time to switch?*\" ‚Äú*What does one do while the other is coding?*‚Äù are always asked when I mention Pair Programming to someone not familiar with the technique.\n\nThese questions are totally valid, and I risk to say I don't have the answers for an environment which doesn't do [**Test Driven Development**](https://en.wikipedia.org/wiki/Test-driven_development) (TDD). Alongside Pair Programming, TDD was at the core of our culture. When in combination with Pair Programming, TDD defines the boundaries for the *driver* [^b], making clear the moment engineers should switch: one writes a test, which should fail, and the other the code which makes the test pass. Once the test passes, the person who just implemented the code writes the next test so the *ping-pong* can continue. At the end of the day everyone ended up writing the same amount of code.\n\nWhile TDD helps to build better and structured code with clear contracts and interfaces [^c], Pair Programming gives the chance to discuss every step of the process, from architectural to code design decisions.\n\nIn a team of 10 engineers, pairing indefinitely with the same person wasn't an option for us. We wanted all the engineers to have the opportunity to work with each other, and in different areas of our mobile application (and [Backend for Frontend](https://duckduckgo.com/?q=Backend+for+Frontend+BFF), BFF). So we had **rotation**. Two engineers would never pair for more than one consecutive day. If Alice and Bob are pairing today, tomorrow one of them hands over the position to Carol. If Alice gives her spot to Carol on the second day, the next move is Bob switching with Dave. on the third day.\n\n```\nDay 1:   Alice + Bob\nDay 2:           Bob + Carol\nDay 3:                 Carol + Dave\n```\n\nThe overlap is fundamental for knowledge transfer.\n\nWhich brings me to another topic: **Lanes**. We had lanes of work, which are closer to *Epics* than *Missions* or *Verticals*. Lanes implement complete features and might exist from a couple of days to a few weeks and, in most cases, are completely independent from each other. E.g., photo backup, new settings menu, mosaics to make a collage of pictures, etc...\n\nEach engineer was in a lane for two days before jumping to another lane (thus the overlap for knowledge transfer in the example above).\n\nThe benefits are obvious. While Pair Programming with TDD makes sure engineers are delivering the best at their best, rotation makes sure they have the whole picture of what they are putting in production (from engineering and product perspective).\n\nThis setup promotes a feeling of shared ownership, where everyone is responsible for the product and technical decisions. The constant rotation also gives a chance to make adjustments to the technical choices made on previous days. It's always better to correct the direction sooner than later, reducing *technical debt*.\n\nFormal Code Review - e.g., via Pull Requests - doesn't exist in this setup. Code Review happens in real time by the pair working on the feature, and commits can be merged into the main branch at any time during the day (and multiple times in most cases). \n\nHaving a shared ownership simplifies communication in the team, questions can be addressed by any person or pair at any time. Every engineer has all the knowledge and context to answer questions from the Product Owner, give/ask feedback to Designers, or interact with external teams. It also eliminates that feeling of \"*this is my code and I don't want anyone to touch it*\".\n\nThe last, but not least, important piece of the puzzle is the [Pow Wow](https://en.wikipedia.org/wiki/Pow_wow). Whenever a pair would like to discuss something with other engineers, they would call for a Pow Wow. A ceremony as simple as everyone standing up to discuss a technical decision for 5-10 minutes. No formalities, no meeting rooms nor calendar invitations.\n\nSince we were all on the same page about technical topics, it was pretty easy to size User Stories during planning meetings. Almost three years working with the same team gave us confidence to perfectly size our 1-week sprints, simplifying our backlog refinement sessions and plannings. For our Product Owner this was extremely valuable in order to maintain the backlog relevant and prioritized.\n\nAs a result we had a fast paced and united team, sharing every aspect of the development process, delivering high quality code with confidence, releasing updates every week, and supporting the Product Owner and Designers. We eliminated time waste by doing Code Review in real time, and technical debt by addressing *bad* choices sooner than later.\n\nOf course this is just part of the story, only covering our engineering ways of working. Equally important is the *partnership* with the Product Owner and Designers, but that's a topic for another post.\n\n[^a]: We had a list of chores in our backlog for when someone had to *solo*. Simple tickets with lower priority.\n[^b]: We didn't use the terms *driver* and *navigator*. In fact, we didn't have names for these roles.\n[^c]: I don't see TDD as a tool to write tests, but as a framework to help me to write better code.\n",
				"date_published": "2021-08-09T04:00:00+02:00",
				"url": "https://otavio.cc/2022/02/06/pair-programming-tdd.html",
				"tags": ["productivity","engineering"]
			},
			{
				"id": "http://otaviocc.micro.blog/2022/02/06/reachability-using-nwpathmonitor.html",
				"title": "Reachability using NWPathMonitor and Combine",
				"content_html": "<p>About a month ago I decided to build a new app to attend a personal need, a desktop client for <a href=\"https://pinboard.in\">Pinboard</a>, a service I&rsquo;ve been using for over a decade to store and manage my bookmarks.</p>\n<p>As any application which requires internet to fetch and update data, my client needed a way to detect network accessibility. For a long time the strategy adopted by engineers in this situation was to rely on Apple&rsquo;s Reachability class, a sample code the company used to provide for download on their developer portal. Well, either that or one of the many CocoaPods frameworks the community built to replace Apple&rsquo;s drag-and-drop solution. But since iOS 12.0 and macOS 10.14 there&rsquo;s a powerfull first-party alternative.</p>\n<p>Introduced a couple of years ago, <a href=\"https://developer.apple.com/documentation/network/nwpathmonitor\"><code>NWPathMonitor</code></a> is the easiest way to detect network changes (and retrieve connection properties). Its interface is extremely simple to use, providing a callback to get notified of updates.</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#a90d91\">let</span> <span style=\"color:#000\">monitor</span> = <span style=\"color:#000\">NWPathMonitor</span>()\n<span style=\"color:#a90d91\">let</span> <span style=\"color:#000\">queue</span> = <span style=\"color:#000\">DispatchQueue</span>.<span style=\"color:#000\">global</span>(<span style=\"color:#000\">qos</span>: .<span style=\"color:#000\">background</span>)\n\n<span style=\"color:#000\">monitor</span>.<span style=\"color:#000\">pathUpdateHandler</span> = { <span style=\"color:#000\">path</span> <span style=\"color:#a90d91\">in</span>\n    <span style=\"color:#5b269a\">print</span>(<span style=\"color:#000\">path</span>.<span style=\"color:#000\">status</span>) <span style=\"color:#177500\">// .unsatisfied, .satisfied, .requiresConnection</span>\n}\n\n<span style=\"color:#000\">monitor</span>.<span style=\"color:#000\">start</span>(\n    <span style=\"color:#000\">queue</span>: <span style=\"color:#000\">queue</span>\n)\n\n<span style=\"color:#177500\">// ...</span>\n\n<span style=\"color:#000\">monitor</span>.<span style=\"color:#000\">stop</span>()\n</code></pre></div><p>My application in built in SwiftUI (2.0) and Combine and the solution above wouldn&rsquo;t <em>feel right</em> in my View Model. So I started with a simple wrapper, hiding the monitor and exposing a publisher which notifies path changes.</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#a90d91\">let</span> <span style=\"color:#000\">wrapper</span> = <span style=\"color:#000\">NWPathMonitorWrapper</span>()\n\n<span style=\"color:#a90d91\">let</span> <span style=\"color:#000\">cancellable</span> = <span style=\"color:#000\">wrapper</span>\n    .<span style=\"color:#000\">pathUpdatePublisher</span>()\n    .<span style=\"color:#000\">receive</span>(<span style=\"color:#000\">on</span>: <span style=\"color:#000\">RunLoop</span>.<span style=\"color:#000\">main</span>)\n    .<span style=\"color:#000\">sink</span> { <span style=\"color:#000\">path</span> <span style=\"color:#a90d91\">in</span>\n        <span style=\"color:#5b269a\">print</span>(<span style=\"color:#000\">path</span>.<span style=\"color:#000\">status</span>)\n    }\n\n<span style=\"color:#000\">wrapper</span>.<span style=\"color:#000\">start</span>()\n</code></pre></div><p>But the implementation (below) still requires <code>NWPathMonitorWrapper.start()</code> to be called, hurting the beauty of the publisher-subscriber relationship.</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#a90d91\">public</span> <span style=\"color:#a90d91\">final</span> <span style=\"color:#a90d91\">class</span> <span style=\"color:#3f6e75\">NWPathMonitorWrapper</span> {\n\n    <span style=\"color:#177500\">// </span><span style=\"color:#177500\">MARK:</span><span style=\"color:#177500\"> - Properties</span>\n\n    <span style=\"color:#a90d91\">private</span> <span style=\"color:#a90d91\">let</span> <span style=\"color:#000\">monitor</span>: <span style=\"color:#000\">NWPathMonitor</span>\n    <span style=\"color:#a90d91\">private</span> <span style=\"color:#a90d91\">let</span> <span style=\"color:#000\">queue</span>: <span style=\"color:#000\">DispatchQueue</span> = .<span style=\"color:#000\">global</span>(<span style=\"color:#000\">qos</span>: .<span style=\"color:#000\">background</span>)\n    <span style=\"color:#a90d91\">private</span> <span style=\"color:#a90d91\">let</span> <span style=\"color:#000\">pathUpdateSubject</span> = <span style=\"color:#000\">PassthroughSubject</span>&lt;<span style=\"color:#000\">NWPath</span>, <span style=\"color:#000\">Never</span>&gt;()\n\n    <span style=\"color:#177500\">// </span><span style=\"color:#177500\">MARK:</span><span style=\"color:#177500\"> - Life cycle</span>\n\n    <span style=\"color:#a90d91\">public</span> <span style=\"color:#a90d91\">init</span>(\n        <span style=\"color:#000\">monitor</span>: <span style=\"color:#000\">NWPathMonitor</span> = <span style=\"color:#000\">NWPathMonitor</span>()\n    ) {\n        <span style=\"color:#a90d91\">self</span>.<span style=\"color:#000\">monitor</span> = <span style=\"color:#000\">monitor</span>\n        <span style=\"color:#a90d91\">self</span>.<span style=\"color:#000\">monitor</span>.<span style=\"color:#000\">pathUpdateHandler</span> = {\n            <span style=\"color:#a90d91\">self</span>.<span style=\"color:#000\">pathUpdateSubject</span>.<span style=\"color:#000\">send</span>(<span style=\"color:#000\">$0</span>)\n        }\n    }\n\n    <span style=\"color:#177500\">// </span><span style=\"color:#177500\">MARK:</span><span style=\"color:#177500\"> - Public</span>\n\n    <span style=\"color:#a90d91\">public</span> <span style=\"color:#a90d91\">func</span> <span style=\"color:#000\">start</span>() {\n        <span style=\"color:#000\">monitor</span>.<span style=\"color:#000\">start</span>(\n            <span style=\"color:#000\">queue</span>: <span style=\"color:#000\">queue</span>\n        )\n    }\n\n    <span style=\"color:#a90d91\">public</span> <span style=\"color:#a90d91\">func</span> <span style=\"color:#000\">stop</span>() {\n        <span style=\"color:#000\">monitor</span>.<span style=\"color:#000\">cancel</span>()\n    }\n\n    <span style=\"color:#a90d91\">public</span> <span style=\"color:#a90d91\">func</span> <span style=\"color:#000\">pathUpdatePublisher</span>() -&gt; <span style=\"color:#000\">AnyPublisher</span>&lt;<span style=\"color:#000\">NWPath</span>, <span style=\"color:#000\">Never</span>&gt; {\n        <span style=\"color:#000\">pathUpdateSubject</span>\n            .<span style=\"color:#000\">eraseToAnyPublisher</span>()\n    }\n}\n</code></pre></div><p>So I looked for a similar example in Apple&rsquo;s frameworks, one which requires a method to be called to trigger the action. Turns out <code>URLSession</code>, familiar to every iOS/macOS engineer, is the perfect example since it requires <code>URLSession.resume()</code> to be called to fire the network requrest. Recently <code>URLSession</code> got a new method, a <a href=\"https://developer.apple.com/documentation/foundation/urlsession/3329707-datataskpublisher\">publisher</a> which starts the request at the moment there&rsquo;s demand (a subscriber):</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#a90d91\">let</span> <span style=\"color:#000\">session</span> = <span style=\"color:#000\">URLSession</span>.<span style=\"color:#000\">shared</span>\n\n<span style=\"color:#a90d91\">let</span> <span style=\"color:#000\">cancellable</span> = <span style=\"color:#000\">session</span>\n    .<span style=\"color:#000\">dataTaskPublisher</span>(<span style=\"color:#a90d91\">for</span>: <span style=\"color:#000\">request</span>)\n    .<span style=\"color:#000\">receive</span>(<span style=\"color:#000\">on</span>: <span style=\"color:#000\">RunLoop</span>.<span style=\"color:#000\">main</span>)\n    .<span style=\"color:#000\">tryMap</span> { <span style=\"color:#000\">result</span> <span style=\"color:#a90d91\">in</span>\n        <span style=\"color:#177500\">// ...</span>\n    }\n    .<span style=\"color:#000\">sink</span>(\n        <span style=\"color:#000\">receiveCompletion</span>: { <span style=\"color:#a90d91\">_</span> <span style=\"color:#a90d91\">in</span> },\n        <span style=\"color:#000\">receiveValue</span>: { <span style=\"color:#a90d91\">_</span> <span style=\"color:#a90d91\">in</span> }    \n    )\n</code></pre></div><p>And that&rsquo;s the interface I wanted for my monitor. A simple publisher which starts <em>emitting values</em> as soon as there&rsquo;s demand.</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#a90d91\">let</span> <span style=\"color:#000\">monitor</span> = <span style=\"color:#000\">NWPathMonitor</span>()\n\n<span style=\"color:#a90d91\">let</span> <span style=\"color:#000\">cancellable</span> = <span style=\"color:#000\">monitor</span>\n    .<span style=\"color:#000\">pathUpdatePublisher</span>()\n    .<span style=\"color:#000\">receive</span>(<span style=\"color:#000\">on</span>: <span style=\"color:#000\">RunLoop</span>.<span style=\"color:#000\">main</span>)\n    .<span style=\"color:#000\">sink</span> { <span style=\"color:#000\">path</span> <span style=\"color:#a90d91\">in</span>\n        <span style=\"color:#5b269a\">print</span>(<span style=\"color:#000\">path</span>.<span style=\"color:#000\">status</span>)\n    } \n</code></pre></div><p>SwiftUI and Combine are new to me, I spiked and re-implemented some UI components I have up in my sleeve, but nothing too complex. Building this client is helping me to explore and learn new APIs.</p>\n<p>The protocols <code>Publisher</code>, <code>Subscriber</code>, and <code>Subscription</code> are examples of these APIs. To implement a custom publisher it&rsquo;s necessary to implement types conforming to two of these protocols.</p>\n<p>First, a quick recap:</p>\n<ul>\n<li><a href=\"https://developer.apple.com/documentation/combine/publisher\"><code>Publisher</code></a> is the type which emits events over time,</li>\n<li><a href=\"https://developer.apple.com/documentation/combine/subscriber/\"><code>Subscriber</code></a> is the type which receives events published by the publisher, and</li>\n<li><a href=\"https://developer.apple.com/documentation/combine/subscription\"><code>Subscription</code></a> implements the link between publishers and subscribers.</li>\n</ul>\n<p>The first step was to define my publisher interface. Since the monitor requires a queue to run, I decided to pass the queue as argument. In order to simplify its interface, a background queue is passed by default to the implementation.</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#a90d91\">extension</span> <span style=\"color:#3f6e75\">NWPathMonitor</span> {\n  \n    <span style=\"color:#a90d91\">public</span> <span style=\"color:#a90d91\">func</span> <span style=\"color:#000\">pathUpdatePublisher</span>(\n        <span style=\"color:#000\">on</span> <span style=\"color:#000\">queue</span>: <span style=\"color:#000\">DispatchQueue</span> = .<span style=\"color:#000\">global</span>(<span style=\"color:#000\">qos</span>: .<span style=\"color:#000\">background</span>)\n    ) -&gt; <span style=\"color:#000\">NWPathMonitor</span>.<span style=\"color:#000\">PathMonitorPublisher</span> {\n      <span style=\"color:#177500\">// ...</span>\n    }\n}\n</code></pre></div><p>The interface provides a hint of the first type to be implemented, <code>NWPathMonitor.PathMonitorPublisher</code>. Most of the code is boilerplate, and for this publisher, the <code>Output</code> expected is <code>NWPath</code>, without a <code>Failure</code>.</p>\n<p>When the publisher <em>receives</em> a subscriber, the link between them is established.</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#a90d91\">extension</span> <span style=\"color:#3f6e75\">NWPathMonitor</span> {\n   \n  <span style=\"color:#a90d91\">public</span> <span style=\"color:#a90d91\">struct</span> <span style=\"color:#3f6e75\">PathMonitorPublisher</span>: <span style=\"color:#000\">Publisher</span> {\n\n        <span style=\"color:#177500\">// </span><span style=\"color:#177500\">MARK:</span><span style=\"color:#177500\"> - Nested types</span>\n    \n        <span style=\"color:#a90d91\">public</span> <span style=\"color:#a90d91\">typealias</span> <span style=\"color:#000\">Output</span> = <span style=\"color:#000\">NWPath</span>\n        <span style=\"color:#a90d91\">public</span> <span style=\"color:#a90d91\">typealias</span> <span style=\"color:#000\">Failure</span> = <span style=\"color:#000\">Never</span>\n    \n        <span style=\"color:#177500\">// </span><span style=\"color:#177500\">MARK:</span><span style=\"color:#177500\"> - Properties</span>\n    \n        <span style=\"color:#a90d91\">private</span> <span style=\"color:#a90d91\">let</span> <span style=\"color:#000\">monitor</span>: <span style=\"color:#000\">NWPathMonitor</span>\n        <span style=\"color:#a90d91\">private</span> <span style=\"color:#a90d91\">let</span> <span style=\"color:#000\">queue</span>: <span style=\"color:#000\">DispatchQueue</span>\n    \n        <span style=\"color:#177500\">// </span><span style=\"color:#177500\">MARK:</span><span style=\"color:#177500\"> - Life cycle</span>\n    \n        <span style=\"color:#000\">fileprivate</span> <span style=\"color:#a90d91\">init</span>(\n            <span style=\"color:#000\">monitor</span>: <span style=\"color:#000\">NWPathMonitor</span>,\n            <span style=\"color:#000\">queue</span>: <span style=\"color:#000\">DispatchQueue</span>\n        ) {\n            <span style=\"color:#a90d91\">self</span>.<span style=\"color:#000\">monitor</span> = <span style=\"color:#000\">monitor</span>\n            <span style=\"color:#a90d91\">self</span>.<span style=\"color:#000\">queue</span> = <span style=\"color:#000\">queue</span>\n        }\n    \n        <span style=\"color:#177500\">// </span><span style=\"color:#177500\">MARK:</span><span style=\"color:#177500\"> - Public</span>\n    \n        <span style=\"color:#a90d91\">public</span> <span style=\"color:#a90d91\">func</span> <span style=\"color:#000\">receive</span>&lt;<span style=\"color:#000\">S</span>&gt;(\n            <span style=\"color:#000\">subscriber</span>: <span style=\"color:#000\">S</span>\n        ) <span style=\"color:#a90d91\">where</span> <span style=\"color:#000\">S</span>: <span style=\"color:#000\">Subscriber</span>, <span style=\"color:#000\">S</span>.<span style=\"color:#000\">Failure</span> == <span style=\"color:#000\">Failure</span>, <span style=\"color:#000\">S</span>.<span style=\"color:#000\">Input</span> == <span style=\"color:#000\">Output</span> {\n            <span style=\"color:#a90d91\">let</span> <span style=\"color:#000\">subscription</span> = <span style=\"color:#000\">PathMonitorSubscription</span>(\n                <span style=\"color:#000\">subscriber</span>: <span style=\"color:#000\">subscriber</span>,\n                <span style=\"color:#000\">monitor</span>: <span style=\"color:#000\">monitor</span>,\n                <span style=\"color:#000\">queue</span>: <span style=\"color:#000\">queue</span>\n            )\n    \n            <span style=\"color:#000\">subscriber</span>.<span style=\"color:#000\">receive</span>(\n                <span style=\"color:#000\">subscription</span>: <span style=\"color:#000\">subscription</span>\n            )\n        }\n    }\n}\n</code></pre></div><p>The <code>Subscription</code> fulfills the demand from the subscriber. As soon as there&rsquo;s demand, it starts monitoring changes using the monitor&rsquo;s callback, passing changes to the subscriber. And since <code>Subscription</code> conforms to <a href=\"https://developer.apple.com/documentation/combine/Cancellable\"><code>Cancellable</code></a>, <code>cancel()</code> can be used to stop the monitor.</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#a90d91\">extension</span> <span style=\"color:#3f6e75\">NWPathMonitor</span> {\n\n    <span style=\"color:#a90d91\">private</span> <span style=\"color:#a90d91\">final</span> <span style=\"color:#a90d91\">class</span> <span style=\"color:#3f6e75\">PathMonitorSubscription</span><span style=\"color:#000\">&lt;</span>\n        <span style=\"color:#000\">S</span>: <span style=\"color:#000\">Subscriber</span>\n    <span style=\"color:#000\">&gt;</span>: <span style=\"color:#000\">Subscription</span> <span style=\"color:#a90d91\">where</span> <span style=\"color:#000\">S</span>.<span style=\"color:#000\">Input</span> == <span style=\"color:#000\">NWPath</span> {\n\n        <span style=\"color:#177500\">// </span><span style=\"color:#177500\">MARK:</span><span style=\"color:#177500\"> - Nested types</span>\n  \n        <span style=\"color:#a90d91\">private</span> <span style=\"color:#a90d91\">let</span> <span style=\"color:#000\">subscriber</span>: <span style=\"color:#000\">S</span>\n        <span style=\"color:#a90d91\">private</span> <span style=\"color:#a90d91\">let</span> <span style=\"color:#000\">monitor</span>: <span style=\"color:#000\">NWPathMonitor</span>\n        <span style=\"color:#a90d91\">private</span> <span style=\"color:#a90d91\">let</span> <span style=\"color:#000\">queue</span>: <span style=\"color:#000\">DispatchQueue</span>\n  \n        <span style=\"color:#177500\">// </span><span style=\"color:#177500\">MARK:</span><span style=\"color:#177500\"> - Life cycle</span>\n  \n        <span style=\"color:#a90d91\">init</span>(\n            <span style=\"color:#000\">subscriber</span>: <span style=\"color:#000\">S</span>,\n            <span style=\"color:#000\">monitor</span>: <span style=\"color:#000\">NWPathMonitor</span>,\n            <span style=\"color:#000\">queue</span>: <span style=\"color:#000\">DispatchQueue</span>\n        ) {\n            <span style=\"color:#a90d91\">self</span>.<span style=\"color:#000\">subscriber</span> = <span style=\"color:#000\">subscriber</span>\n            <span style=\"color:#a90d91\">self</span>.<span style=\"color:#000\">monitor</span> = <span style=\"color:#000\">monitor</span>\n            <span style=\"color:#a90d91\">self</span>.<span style=\"color:#000\">queue</span> = <span style=\"color:#000\">queue</span>\n        }\n  \n        <span style=\"color:#177500\">// </span><span style=\"color:#177500\">MARK:</span><span style=\"color:#177500\"> - Public</span>\n  \n        <span style=\"color:#a90d91\">func</span> <span style=\"color:#000\">request</span>(\n            <span style=\"color:#a90d91\">_</span> <span style=\"color:#000\">demand</span>: <span style=\"color:#000\">Subscribers</span>.<span style=\"color:#000\">Demand</span>\n        ) {\n            <span style=\"color:#a90d91\">guard</span>\n                <span style=\"color:#000\">demand</span> == .<span style=\"color:#000\">unlimited</span>,\n                <span style=\"color:#000\">monitor</span>.<span style=\"color:#000\">pathUpdateHandler</span> == <span style=\"color:#a90d91\">nil</span>\n            <span style=\"color:#a90d91\">else</span> {\n                <span style=\"color:#a90d91\">return</span>\n            }\n  \n            <span style=\"color:#000\">monitor</span>.<span style=\"color:#000\">pathUpdateHandler</span> = { <span style=\"color:#000\">path</span> <span style=\"color:#a90d91\">in</span>\n                <span style=\"color:#a90d91\">_</span> = <span style=\"color:#a90d91\">self</span>.<span style=\"color:#000\">subscriber</span>.<span style=\"color:#000\">receive</span>(<span style=\"color:#000\">path</span>)\n            }\n  \n            <span style=\"color:#000\">monitor</span>.<span style=\"color:#000\">start</span>(\n                <span style=\"color:#000\">queue</span>: <span style=\"color:#000\">queue</span>\n            )\n        }\n  \n        <span style=\"color:#a90d91\">func</span> <span style=\"color:#000\">cancel</span>() {\n            <span style=\"color:#000\">monitor</span>.<span style=\"color:#000\">cancel</span>()\n        }\n    }\n}\n</code></pre></div><p>With all in place, the View Model becomes extremely simple and elegant. Below a View Model which publishes a boolean indicating the connectivity status to the View.</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#a90d91\">final</span> <span style=\"color:#a90d91\">class</span> <span style=\"color:#3f6e75\">ViewModel</span>: <span style=\"color:#000\">ObservableObject</span> {\n\n    <span style=\"color:#177500\">// </span><span style=\"color:#177500\">MARK:</span><span style=\"color:#177500\"> - Properties</span>\n\n    @<span style=\"color:#000\">Published</span> <span style=\"color:#a90d91\">var</span> <span style=\"color:#000\">isConnected</span>: <span style=\"color:#a90d91\">Bool</span> = <span style=\"color:#a90d91\">false</span>\n    <span style=\"color:#a90d91\">private</span> <span style=\"color:#a90d91\">var</span> <span style=\"color:#000\">monitorCancellable</span>: <span style=\"color:#000\">Cancellable</span>?\n\n    <span style=\"color:#177500\">// </span><span style=\"color:#177500\">MARK:</span><span style=\"color:#177500\"> - Life cycle</span>\n\n    <span style=\"color:#a90d91\">init</span>(\n        <span style=\"color:#000\">pathMonitorPublisher</span>: <span style=\"color:#000\">NWPathMonitor</span>.<span style=\"color:#000\">PathMonitorPublisher</span>\n    ) {\n        <span style=\"color:#000\">monitorCancellable</span> = <span style=\"color:#000\">pathMonitorPublisher</span>\n            .<span style=\"color:#000\">receive</span>(<span style=\"color:#000\">on</span>: <span style=\"color:#000\">RunLoop</span>.<span style=\"color:#000\">main</span>)\n            .<span style=\"color:#5b269a\">map</span> { <span style=\"color:#000\">$0</span>.<span style=\"color:#000\">status</span> == .<span style=\"color:#000\">satisfied</span> }\n            .<span style=\"color:#000\">assign</span>(<span style=\"color:#000\">to</span>: <span style=\"color:#000\">\\</span>.<span style=\"color:#000\">isConnected</span>, <span style=\"color:#000\">on</span>: <span style=\"color:#a90d91\">self</span>)\n    }\n}\n</code></pre></div><p>Overall, I&rsquo;m happy with the result, and am looking forward to using Combine (and SwiftUI) in production.</p>\n<p>Resources:</p>\n<ul>\n<li><a href=\"https://heckj.github.io/swiftui-notes/\">Using Combine</a></li>\n<li><a href=\"https://www.apeth.com/UnderstandingCombine/start.html\">Introducing Combine</a></li>\n</ul>\n",
				"content_text": "About a month ago I decided to build a new app to attend a personal need, a desktop client for [Pinboard](https://pinboard.in), a service I've been using for over a decade to store and manage my bookmarks.\n\nAs any application which requires internet to fetch and update data, my client needed a way to detect network accessibility. For a long time the strategy adopted by engineers in this situation was to rely on Apple's Reachability class, a sample code the company used to provide for download on their developer portal. Well, either that or one of the many CocoaPods frameworks the community built to replace Apple's drag-and-drop solution. But since iOS 12.0 and macOS 10.14 there's a powerfull first-party alternative.\n\nIntroduced a couple of years ago, [`NWPathMonitor`](https://developer.apple.com/documentation/network/nwpathmonitor) is the easiest way to detect network changes (and retrieve connection properties). Its interface is extremely simple to use, providing a callback to get notified of updates.\n\n```swift\nlet monitor = NWPathMonitor()\nlet queue = DispatchQueue.global(qos: .background)\n\nmonitor.pathUpdateHandler = { path in\n    print(path.status) // .unsatisfied, .satisfied, .requiresConnection\n}\n\nmonitor.start(\n    queue: queue\n)\n\n// ...\n\nmonitor.stop()\n```\n\nMy application in built in SwiftUI (2.0) and Combine and the solution above wouldn't *feel right* in my View Model. So I started with a simple wrapper, hiding the monitor and exposing a publisher which notifies path changes. \n\n```swift\nlet wrapper = NWPathMonitorWrapper()\n\nlet cancellable = wrapper\n    .pathUpdatePublisher()\n    .receive(on: RunLoop.main)\n    .sink { path in\n        print(path.status)\n    }\n\nwrapper.start()\n```\n\nBut the implementation (below) still requires `NWPathMonitorWrapper.start()` to be called, hurting the beauty of the publisher-subscriber relationship.\n\n```swift\npublic final class NWPathMonitorWrapper {\n\n    // MARK: - Properties\n\n    private let monitor: NWPathMonitor\n    private let queue: DispatchQueue = .global(qos: .background)\n    private let pathUpdateSubject = PassthroughSubject<NWPath, Never>()\n\n    // MARK: - Life cycle\n\n    public init(\n        monitor: NWPathMonitor = NWPathMonitor()\n    ) {\n        self.monitor = monitor\n        self.monitor.pathUpdateHandler = {\n            self.pathUpdateSubject.send($0)\n        }\n    }\n\n    // MARK: - Public\n\n    public func start() {\n        monitor.start(\n            queue: queue\n        )\n    }\n\n    public func stop() {\n        monitor.cancel()\n    }\n\n    public func pathUpdatePublisher() -> AnyPublisher<NWPath, Never> {\n        pathUpdateSubject\n            .eraseToAnyPublisher()\n    }\n}\n```\n\nSo I looked for a similar example in Apple's frameworks, one which requires a method to be called to trigger the action. Turns out `URLSession`, familiar to every iOS/macOS engineer, is the perfect example since it requires `URLSession.resume()` to be called to fire the network requrest. Recently `URLSession` got a new method, a [publisher](https://developer.apple.com/documentation/foundation/urlsession/3329707-datataskpublisher) which starts the request at the moment there's demand (a subscriber):\n\n```swift\nlet session = URLSession.shared\n\nlet cancellable = session\n    .dataTaskPublisher(for: request)\n    .receive(on: RunLoop.main)\n    .tryMap { result in\n        // ...\n    }\n    .sink(\n        receiveCompletion: { _ in },\n        receiveValue: { _ in }    \n    )\n```\n\nAnd that's the interface I wanted for my monitor. A simple publisher which starts *emitting values* as soon as there's demand.\n\n```swift\nlet monitor = NWPathMonitor()\n\nlet cancellable = monitor\n    .pathUpdatePublisher()\n    .receive(on: RunLoop.main)\n    .sink { path in\n        print(path.status)\n    } \n```\n\nSwiftUI and Combine are new to me, I spiked and re-implemented some UI components I have up in my sleeve, but nothing too complex. Building this client is helping me to explore and learn new APIs.\n\nThe protocols `Publisher`, `Subscriber`, and `Subscription` are examples of these APIs. To implement a custom publisher it's necessary to implement types conforming to two of these protocols.\n\nFirst, a quick recap:\n\n* [`Publisher`](https://developer.apple.com/documentation/combine/publisher) is the type which emits events over time,\n* [`Subscriber`](https://developer.apple.com/documentation/combine/subscriber/) is the type which receives events published by the publisher, and\n* [`Subscription`](https://developer.apple.com/documentation/combine/subscription) implements the link between publishers and subscribers.\n\nThe first step was to define my publisher interface. Since the monitor requires a queue to run, I decided to pass the queue as argument. In order to simplify its interface, a background queue is passed by default to the implementation.\n\n```swift\nextension NWPathMonitor {\n  \n    public func pathUpdatePublisher(\n        on queue: DispatchQueue = .global(qos: .background)\n    ) -> NWPathMonitor.PathMonitorPublisher {\n      // ...\n    }\n}\n```\n\nThe interface provides a hint of the first type to be implemented, `NWPathMonitor.PathMonitorPublisher`. Most of the code is boilerplate, and for this publisher, the `Output` expected is `NWPath`, without a `Failure`.\n\nWhen the publisher *receives* a subscriber, the link between them is established.\n\n```swift\nextension NWPathMonitor {\n   \n  public struct PathMonitorPublisher: Publisher {\n\n        // MARK: - Nested types\n    \n        public typealias Output = NWPath\n        public typealias Failure = Never\n    \n        // MARK: - Properties\n    \n        private let monitor: NWPathMonitor\n        private let queue: DispatchQueue\n    \n        // MARK: - Life cycle\n    \n        fileprivate init(\n            monitor: NWPathMonitor,\n            queue: DispatchQueue\n        ) {\n            self.monitor = monitor\n            self.queue = queue\n        }\n    \n        // MARK: - Public\n    \n        public func receive<S>(\n            subscriber: S\n        ) where S: Subscriber, S.Failure == Failure, S.Input == Output {\n            let subscription = PathMonitorSubscription(\n                subscriber: subscriber,\n                monitor: monitor,\n                queue: queue\n            )\n    \n            subscriber.receive(\n                subscription: subscription\n            )\n        }\n    }\n}\n```\n\nThe `Subscription` fulfills the demand from the subscriber. As soon as there's demand, it starts monitoring changes using the monitor's callback, passing changes to the subscriber. And since `Subscription` conforms to [`Cancellable`](https://developer.apple.com/documentation/combine/Cancellable), `cancel()` can be used to stop the monitor.\n\n```swift\nextension NWPathMonitor {\n\n    private final class PathMonitorSubscription<\n        S: Subscriber\n    >: Subscription where S.Input == NWPath {\n\n        // MARK: - Nested types\n  \n        private let subscriber: S\n        private let monitor: NWPathMonitor\n        private let queue: DispatchQueue\n  \n        // MARK: - Life cycle\n  \n        init(\n            subscriber: S,\n            monitor: NWPathMonitor,\n            queue: DispatchQueue\n        ) {\n            self.subscriber = subscriber\n            self.monitor = monitor\n            self.queue = queue\n        }\n  \n        // MARK: - Public\n  \n        func request(\n            _ demand: Subscribers.Demand\n        ) {\n            guard\n                demand == .unlimited,\n                monitor.pathUpdateHandler == nil\n            else {\n                return\n            }\n  \n            monitor.pathUpdateHandler = { path in\n                _ = self.subscriber.receive(path)\n            }\n  \n            monitor.start(\n                queue: queue\n            )\n        }\n  \n        func cancel() {\n            monitor.cancel()\n        }\n    }\n}\n```\n\nWith all in place, the View Model becomes extremely simple and elegant. Below a View Model which publishes a boolean indicating the connectivity status to the View.\n\n```swift\nfinal class ViewModel: ObservableObject {\n\n    // MARK: - Properties\n\n    @Published var isConnected: Bool = false\n    private var monitorCancellable: Cancellable?\n\n    // MARK: - Life cycle\n\n    init(\n        pathMonitorPublisher: NWPathMonitor.PathMonitorPublisher\n    ) {\n        monitorCancellable = pathMonitorPublisher\n            .receive(on: RunLoop.main)\n            .map { $0.status == .satisfied }\n            .assign(to: \\.isConnected, on: self)\n    }\n}\n```\n\nOverall, I'm happy with the result, and am looking forward to using Combine (and SwiftUI) in production.\n\nResources:\n\n* [Using Combine](https://heckj.github.io/swiftui-notes/)\n* [Introducing Combine](https://www.apeth.com/UnderstandingCombine/start.html)\n",
				"date_published": "2021-02-21T03:00:00+02:00",
				"url": "https://otavio.cc/2022/02/06/reachability-using-nwpathmonitor.html",
				"tags": ["programming"]
			},
			{
				"id": "http://otaviocc.micro.blog/2022/02/06/how-to-replace.html",
				"title": "How to replace type methods in Swift to improve testability",
				"content_html": "<p>Like them or not, <a href=\"https://docs.swift.org/swift-book/LanguageGuide/Methods.html\">type methods</a>, aka <em>class methods</em> or <em>static methods</em>, are heavily used in Swift and part of our daily lives as developers.</p>\n<p>From analytics trackers to requesting system permissions, we‚Äôve all had to face type methods from external libraries in which we had no control over. Testing code that interacts with them might seem hard without using <a href=\"http://nshipster.com/method-swizzling/\">method swizzling</a>, but fortunately, this doesn&rsquo;t always have to be the case.</p>\n<p>Let&rsquo;s suppose there&rsquo;s a class called <code>APIWrapper</code>, which implements a type method that requests search results from an endpoint.</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#a90d91\">public</span> <span style=\"color:#a90d91\">class</span> <span style=\"color:#3f6e75\">APIWrapper</span> {\n    <span style=\"color:#a90d91\">public</span> <span style=\"color:#a90d91\">static</span> <span style=\"color:#a90d91\">func</span> <span style=\"color:#000\">search</span>(\n        <span style=\"color:#000\">query</span>: <span style=\"color:#a90d91\">String</span>,\n        <span style=\"color:#000\">completion</span>: @<span style=\"color:#000\">escaping</span> (<span style=\"color:#000\">Result</span><span style=\"color:#000\">&lt;</span>[<span style=\"color:#a90d91\">String</span>], <span style=\"color:#000\">Error</span>&gt;) -&gt; <span style=\"color:#a90d91\">Void</span>\n    )\n}\n</code></pre></div><p>The method takes a query, <code>String</code>, and a completion block, <code>(Result&lt;[String], Error&gt;) -&gt; Void</code>, which is triggered once the request finishes. Its internal implementation doesn&rsquo;t really matter since it could be from an external framework or generated by a <a href=\"https://github.com/swagger-api/swagger-codegen\">code generator</a> from the API specification.</p>\n<p>Consuming the method is straightforward:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#000\">APIWrapper</span>.<span style=\"color:#000\">search</span>(<span style=\"color:#000\">query</span>: <span style=\"color:#c41a16\">&#34;fancy restaurant&#34;</span>) { <span style=\"color:#000\">result</span> <span style=\"color:#a90d91\">in</span>\n    <span style=\"color:#177500\">// do something with &#39;result&#39;</span>\n}\n</code></pre></div><p>But testing the part of the application that interacts with it isn&rsquo;t that obvious. Especially when we want to:</p>\n<ol>\n<li>avoid making real network requests</li>\n<li>stress all the possibilities the interface allows. For instance:\n<ul>\n<li>Is the search method called with the correct query string?</li>\n<li>What happens when the completion block returns an empty array?</li>\n<li>What happens when the completion block returns an array of results?</li>\n<li>What happens when the completion block is called with an error?</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"basic-data-source-implementation\"><strong>Basic Data Source implementation</strong></h3>\n<p>The snippet below shows <code>SearchResultsTableViewDataSource</code>, a <code>UITableViewDataSource</code> subclass which uses the API wrapper to populate the table view when the network request completes. Testing it triggers a real network request and doesn&rsquo;t provide what&rsquo;s needed to test the query passed to the wrapper and the different behaviors when the result returns.</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#a90d91\">final</span> <span style=\"color:#a90d91\">class</span> <span style=\"color:#3f6e75\">SearchResultsTableViewDataSource</span>: <span style=\"color:#000\">NSObject</span>,\n                                              <span style=\"color:#000\">UITableViewDataSource</span> {\n    <span style=\"color:#a90d91\">private</span> <span style=\"color:#a90d91\">let</span> <span style=\"color:#000\">tableView</span>: <span style=\"color:#000\">UITableView</span>\n    <span style=\"color:#a90d91\">private</span> <span style=\"color:#a90d91\">var</span> <span style=\"color:#000\">results</span>: [<span style=\"color:#a90d91\">String</span>] = []\n\n    <span style=\"color:#a90d91\">init</span>(\n        <span style=\"color:#000\">tableView</span>: <span style=\"color:#000\">UITableView</span>\n    ) {\n        <span style=\"color:#a90d91\">self</span>.<span style=\"color:#000\">tableView</span> = <span style=\"color:#000\">tableView</span>\n    }\n\n    <span style=\"color:#a90d91\">func</span> <span style=\"color:#000\">fetchSearchResuls</span>(<span style=\"color:#000\">query</span>: <span style=\"color:#a90d91\">String</span>) {\n        <span style=\"color:#000\">APIWrapper</span>.<span style=\"color:#000\">search</span>(\n            <span style=\"color:#000\">query</span>: <span style=\"color:#000\">query</span>\n        ) { [<span style=\"color:#a90d91\">weak</span> <span style=\"color:#a90d91\">self</span>] <span style=\"color:#000\">result</span> <span style=\"color:#a90d91\">in</span>\n            <span style=\"color:#a90d91\">switch</span> <span style=\"color:#000\">result</span> {\n            <span style=\"color:#a90d91\">case</span> .<span style=\"color:#000\">success</span>(<span style=\"color:#a90d91\">let</span> <span style=\"color:#000\">results</span>): <span style=\"color:#a90d91\">self</span>?.<span style=\"color:#000\">results</span> = <span style=\"color:#000\">results</span>\n            <span style=\"color:#a90d91\">case</span> .<span style=\"color:#000\">failure</span>: <span style=\"color:#a90d91\">self</span>?.<span style=\"color:#000\">results</span> = []\n            }\n            <span style=\"color:#a90d91\">self</span>?.<span style=\"color:#000\">tableView</span>.<span style=\"color:#000\">reloadData</span>()\n        }\n    }\n\n    <span style=\"color:#177500\">// ... UITableViewDataSource methods ...</span>\n}\n</code></pre></div><p>If <code>APIWrapper</code> had an instance method instead of a type method, two easy and obvious solutions would emerge: <em>protocols</em> and <em>subclasses</em>. Using either/or it would be possible to replace the wrapper with a <a href=\"https://martinfowler.com/bliki/TestDouble.html\">test double</a> that captures the query parameter and completion block for verifying expectations.</p>\n<h3 id=\"dependency-injection-to-the-rescue\"><strong>Dependency injection to the rescue</strong></h3>\n<p>In the example above, the API wrapper interface can&rsquo;t be changed and has to stay as a type method, therefore the easiest way to overcome this is via <a href=\"https://en.wikipedia.org/wiki/Dependency_injection\">dependency injection</a>. In this case, <em>method injection</em> via object initialization</p>\n<p>The code below stores a method which matches the qualified symbol name of the wrapper method, using it to perform the search. In order to simplify the <code>SearchResultsTableViewDataSource</code> interface, the wrapper&rsquo;s search method is assigned using a <a href=\"https://docs.swift.org/swift-book/LanguageGuide/Functions.html#ID169\">default parameter value</a>.</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#a90d91\">final</span> <span style=\"color:#a90d91\">class</span> <span style=\"color:#3f6e75\">SearchResultsTableViewDataSource</span>: <span style=\"color:#000\">NSObject</span>,\n                                              <span style=\"color:#000\">UITableViewDataSource</span> {\n    <span style=\"color:#a90d91\">typealias</span> <span style=\"color:#000\">SearcherCompletion</span>\n        = (<span style=\"color:#000\">Result</span><span style=\"color:#000\">&lt;</span>[<span style=\"color:#a90d91\">String</span>], <span style=\"color:#000\">Error</span>&gt;) -&gt; <span style=\"color:#a90d91\">Void</span>\n    <span style=\"color:#a90d91\">typealias</span> <span style=\"color:#000\">Searcher</span>\n        = (<span style=\"color:#a90d91\">String</span>, @<span style=\"color:#000\">escaping</span> <span style=\"color:#000\">SearcherCompletion</span>) -&gt; <span style=\"color:#a90d91\">Void</span>\n\n    <span style=\"color:#a90d91\">private</span> <span style=\"color:#a90d91\">let</span> <span style=\"color:#000\">tableView</span>: <span style=\"color:#000\">UITableView</span>\n    <span style=\"color:#a90d91\">private</span> <span style=\"color:#a90d91\">var</span> <span style=\"color:#000\">results</span>: [<span style=\"color:#a90d91\">String</span>] = []\n    <span style=\"color:#a90d91\">private</span> <span style=\"color:#a90d91\">var</span> <span style=\"color:#000\">searcher</span>: <span style=\"color:#000\">Searcher</span>\n\n    <span style=\"color:#a90d91\">init</span>(\n        <span style=\"color:#000\">tableView</span>: <span style=\"color:#000\">UITableView</span>,\n        <span style=\"color:#000\">searcher</span>: @<span style=\"color:#000\">escaping</span> <span style=\"color:#000\">Searcher</span> = <span style=\"color:#000\">APIWrapper</span>.<span style=\"color:#000\">search</span>(<span style=\"color:#000\">query</span>:<span style=\"color:#000\">completion</span>:)\n    ) {\n        <span style=\"color:#a90d91\">self</span>.<span style=\"color:#000\">tableView</span> = <span style=\"color:#000\">tableView</span>\n        <span style=\"color:#a90d91\">self</span>.<span style=\"color:#000\">searcher</span> = <span style=\"color:#000\">searcher</span>\n    }\n\n    <span style=\"color:#a90d91\">func</span> <span style=\"color:#000\">fetchSearchResuls</span>(<span style=\"color:#000\">query</span>: <span style=\"color:#a90d91\">String</span>) {\n        <span style=\"color:#000\">searcher</span>(<span style=\"color:#000\">query</span>) { [<span style=\"color:#a90d91\">weak</span> <span style=\"color:#a90d91\">self</span>] <span style=\"color:#000\">result</span> <span style=\"color:#a90d91\">in</span>\n            <span style=\"color:#a90d91\">switch</span> <span style=\"color:#000\">result</span> {\n            <span style=\"color:#a90d91\">case</span> .<span style=\"color:#000\">success</span>(<span style=\"color:#a90d91\">let</span> <span style=\"color:#000\">results</span>): <span style=\"color:#a90d91\">self</span>?.<span style=\"color:#000\">results</span> = <span style=\"color:#000\">results</span>\n            <span style=\"color:#a90d91\">case</span> .<span style=\"color:#000\">failure</span>: <span style=\"color:#a90d91\">self</span>?.<span style=\"color:#000\">results</span> = []\n            }\n            <span style=\"color:#a90d91\">self</span>?.<span style=\"color:#000\">tableView</span>.<span style=\"color:#000\">reloadData</span>()\n        }\n    }\n\n    <span style=\"color:#177500\">// ... UITableViewDataSource methods ...</span>\n}\n</code></pre></div><h3 id=\"testing-with-dependency-injection\"><strong>Testing with Dependency Injection</strong></h3>\n<p>Finally, testing becomes trivial. The injected method is used to capture the query term and the completion block passed to the API wrapper. Once captured, these can be used to verify expectations.</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#a90d91\">final</span> <span style=\"color:#a90d91\">class</span> <span style=\"color:#3f6e75\">SearchResultsTableViewDataSourceTests</span>: <span style=\"color:#000\">XCTestCase</span> {\n    <span style=\"color:#a90d91\">var</span> <span style=\"color:#000\">tableView</span>: <span style=\"color:#000\">UITableView</span>!\n    <span style=\"color:#a90d91\">var</span> <span style=\"color:#000\">dataSource</span>: <span style=\"color:#000\">SearchResultsTableViewDataSource</span>?\n    <span style=\"color:#a90d91\">var</span> <span style=\"color:#000\">lastSearchQuery</span>: <span style=\"color:#a90d91\">String</span>?\n    <span style=\"color:#a90d91\">var</span> <span style=\"color:#000\">lastSearchCompletion</span>:\n        <span style=\"color:#000\">SearchResultsTableViewDataSource</span>.<span style=\"color:#000\">SearcherCompletion</span>?\n\n    <span style=\"color:#a90d91\">override</span> <span style=\"color:#a90d91\">func</span> <span style=\"color:#000\">setUp</span>() {\n        <span style=\"color:#a90d91\">super</span>.<span style=\"color:#000\">setUp</span>()\n\n        <span style=\"color:#000\">tableView</span> = <span style=\"color:#000\">UITableView</span>()\n\n        <span style=\"color:#000\">dataSource</span> = <span style=\"color:#000\">SearchResultsTableViewDataSource</span>(\n            <span style=\"color:#000\">tableView</span>: <span style=\"color:#000\">tableView</span>\n        ) { <span style=\"color:#000\">query</span>, <span style=\"color:#000\">completion</span> <span style=\"color:#a90d91\">in</span>\n            <span style=\"color:#a90d91\">self</span>.<span style=\"color:#000\">lastSearchQuery</span> = <span style=\"color:#000\">query</span>\n            <span style=\"color:#a90d91\">self</span>.<span style=\"color:#000\">lastSearchCompletion</span> = <span style=\"color:#000\">completion</span>\n        }\n    }\n\n    <span style=\"color:#a90d91\">func</span> <span style=\"color:#000\">testFetchSearchResultsQuery</span>() {\n        <span style=\"color:#177500\">// When the method is called</span>\n        <span style=\"color:#000\">dataSource</span>?.<span style=\"color:#000\">fetchSearchResuls</span>(<span style=\"color:#000\">query</span>: <span style=\"color:#c41a16\">&#34;Mocked Search Query&#34;</span>)\n\n        <span style=\"color:#000\">XCTAssertEqual</span>(\n            <span style=\"color:#000\">lastSearchQuery</span>,\n            <span style=\"color:#c41a16\">&#34;Mocked Search Query&#34;</span>,\n            <span style=\"color:#c41a16\">&#34;It calls the API wrapper with the correct search query&#34;</span>\n        )\n    }\n\n    <span style=\"color:#a90d91\">func</span> <span style=\"color:#000\">testFetchSearchResultsWithoutResults</span>() {\n        <span style=\"color:#177500\">// When the method is called</span>\n        <span style=\"color:#000\">dataSource</span>?.<span style=\"color:#000\">fetchSearchResuls</span>(<span style=\"color:#000\">query</span>: <span style=\"color:#c41a16\">&#34;Mocked Search Query&#34;</span>)\n\n        <span style=\"color:#177500\">// And the API wrapper completion block is called with an empty array</span>\n        <span style=\"color:#000\">lastSearchCompletion</span>?(.<span style=\"color:#000\">success</span>([]))\n\n        <span style=\"color:#000\">XCTAssertEqual</span>(\n            <span style=\"color:#000\">dataSource</span>?.<span style=\"color:#000\">tableView</span>(<span style=\"color:#000\">tableView</span>, <span style=\"color:#000\">numberOfRowsInSection</span>: <span style=\"color:#1c01ce\">0</span>),\n            <span style=\"color:#1c01ce\">0</span>,\n            <span style=\"color:#c41a16\">&#34;It empties the table view&#34;</span>\n        )\n    }\n\n    <span style=\"color:#a90d91\">func</span> <span style=\"color:#000\">testFetchSearchResultsWithResults</span>() {\n        <span style=\"color:#177500\">// When the method is called</span>\n        <span style=\"color:#000\">dataSource</span>?.<span style=\"color:#000\">fetchSearchResuls</span>(<span style=\"color:#000\">query</span>: <span style=\"color:#c41a16\">&#34;Mocked Search Query&#34;</span>)\n\n        <span style=\"color:#177500\">// And the API wrapper completion block is called with results</span>\n        <span style=\"color:#000\">lastSearchCompletion</span>?(.<span style=\"color:#000\">success</span>([<span style=\"color:#c41a16\">&#34;result 1&#34;</span>, <span style=\"color:#c41a16\">&#34;result 2&#34;</span>]))\n\n        <span style=\"color:#000\">XCTAssertEqual</span>(\n            <span style=\"color:#000\">dataSource</span>?.<span style=\"color:#000\">tableView</span>(<span style=\"color:#000\">tableView</span>, <span style=\"color:#000\">numberOfRowsInSection</span>: <span style=\"color:#1c01ce\">0</span>),\n            <span style=\"color:#1c01ce\">2</span>,\n            <span style=\"color:#c41a16\">&#34;It adds the correct number of results to the table view&#34;</span>\n        )\n\n        <span style=\"color:#000\">XCTAssertEqual</span>(\n            <span style=\"color:#000\">dataSource</span>?.<span style=\"color:#000\">tableView</span>(\n                <span style=\"color:#000\">tableView</span>,\n                <span style=\"color:#000\">cellForRowAt</span>: <span style=\"color:#000\">IndexPath</span>(<span style=\"color:#000\">row</span>: <span style=\"color:#1c01ce\">0</span>, <span style=\"color:#000\">section</span>: <span style=\"color:#1c01ce\">0</span>)\n            ).<span style=\"color:#000\">textLabel</span>?.<span style=\"color:#000\">text</span>,\n            <span style=\"color:#c41a16\">&#34;result 1&#34;</span>,\n            <span style=\"color:#c41a16\">&#34;It configures the first cell&#34;</span>\n        )\n\n        <span style=\"color:#000\">XCTAssertEqual</span>(\n            <span style=\"color:#000\">dataSource</span>?.<span style=\"color:#000\">tableView</span>(\n                <span style=\"color:#000\">tableView</span>,\n                <span style=\"color:#000\">cellForRowAt</span>: <span style=\"color:#000\">IndexPath</span>(<span style=\"color:#000\">row</span>: <span style=\"color:#1c01ce\">1</span>, <span style=\"color:#000\">section</span>: <span style=\"color:#1c01ce\">0</span>)\n            ).<span style=\"color:#000\">textLabel</span>?.<span style=\"color:#000\">text</span>,\n            <span style=\"color:#c41a16\">&#34;result 2&#34;</span>,\n            <span style=\"color:#c41a16\">&#34;It configures the second cell&#34;</span>\n        )\n    }\n\n    <span style=\"color:#a90d91\">func</span> <span style=\"color:#000\">testFetchSearchResultsWithError</span>() {\n        <span style=\"color:#177500\">// When the method is called</span>\n        <span style=\"color:#000\">dataSource</span>?.<span style=\"color:#000\">fetchSearchResuls</span>(<span style=\"color:#000\">query</span>: <span style=\"color:#c41a16\">&#34;Mocked Search Query&#34;</span>)\n\n        <span style=\"color:#177500\">// And the API wrapper completion block is called with an error</span>\n        <span style=\"color:#a90d91\">enum</span> <span style=\"color:#3f6e75\">MockError</span>: <span style=\"color:#000\">Error</span> { <span style=\"color:#a90d91\">case</span> <span style=\"color:#000\">someGenericError</span> }\n        <span style=\"color:#000\">lastSearchCompletion</span>?(.<span style=\"color:#000\">failure</span>(<span style=\"color:#000\">MockError</span>.<span style=\"color:#000\">someGenericError</span>))\n\n        <span style=\"color:#000\">XCTAssertEqual</span>(\n            <span style=\"color:#000\">dataSource</span>?.<span style=\"color:#000\">tableView</span>(<span style=\"color:#000\">tableView</span>, <span style=\"color:#000\">numberOfRowsInSection</span>: <span style=\"color:#1c01ce\">0</span>),\n            <span style=\"color:#1c01ce\">0</span>,\n            <span style=\"color:#c41a16\">&#34;It empties the table view&#34;</span>\n        )\n    }\n}\n</code></pre></div><p>More importantly, not only does this method work with type methods but also with <em>free functions</em>, such as <code>SecItemAdd(_:_:)</code> used to <a href=\"https://developer.apple.com/documentation/security/1401659-secitemadd\">add items to the Keychain</a>.</p>\n",
				"content_text": "Like them or not, [type methods](https://docs.swift.org/swift-book/LanguageGuide/Methods.html), aka *class methods* or *static methods*, are heavily used in Swift and part of our daily lives as developers. \n\nFrom analytics trackers to requesting system permissions, we‚Äôve all had to face type methods from external libraries in which we had no control over. Testing code that interacts with them might seem hard without using [method swizzling](http://nshipster.com/method-swizzling/), but fortunately, this doesn't always have to be the case.\n\nLet's suppose there's a class called `APIWrapper`, which implements a type method that requests search results from an endpoint.\n\n```swift\npublic class APIWrapper {\n    public static func search(\n        query: String,\n        completion: @escaping (Result<[String], Error>) -> Void\n    )\n}\n```\n\nThe method takes a query, `String`, and a completion block, `(Result<[String], Error>) -> Void`, which is triggered once the request finishes. Its internal implementation doesn't really matter since it could be from an external framework or generated by a [code generator](https://github.com/swagger-api/swagger-codegen) from the API specification.\n\nConsuming the method is straightforward:\n\n```swift\nAPIWrapper.search(query: \"fancy restaurant\") { result in\n    // do something with 'result'\n}\n```\n\nBut testing the part of the application that interacts with it isn't that obvious. Especially when we want to:\n\n1. avoid making real network requests\n2. stress all the possibilities the interface allows. For instance:\n   - Is the search method called with the correct query string?\n   - What happens when the completion block returns an empty array?\n   - What happens when the completion block returns an array of results?\n   - What happens when the completion block is called with an error?\n\n### **Basic Data Source implementation**\n\nThe snippet below shows `SearchResultsTableViewDataSource`, a `UITableViewDataSource` subclass which uses the API wrapper to populate the table view when the network request completes. Testing it triggers a real network request and doesn't provide what's needed to test the query passed to the wrapper and the different behaviors when the result returns.\n\n```swift\nfinal class SearchResultsTableViewDataSource: NSObject,\n                                              UITableViewDataSource {\n    private let tableView: UITableView\n    private var results: [String] = []\n\n    init(\n        tableView: UITableView\n    ) {\n        self.tableView = tableView\n    }\n\n    func fetchSearchResuls(query: String) {\n        APIWrapper.search(\n            query: query\n        ) { [weak self] result in\n            switch result {\n            case .success(let results): self?.results = results\n            case .failure: self?.results = []\n            }\n            self?.tableView.reloadData()\n        }\n    }\n\n    // ... UITableViewDataSource methods ...\n}\n```\n\nIf `APIWrapper` had an instance method instead of a type method, two easy and obvious solutions would emerge: *protocols* and *subclasses*. Using either/or it would be possible to replace the wrapper with a [test double](https://martinfowler.com/bliki/TestDouble.html) that captures the query parameter and completion block for verifying expectations.\n\n### **Dependency injection to the rescue**\n\nIn the example above, the API wrapper interface can't be changed and has to stay as a type method, therefore the easiest way to overcome this is via [dependency injection](https://en.wikipedia.org/wiki/Dependency_injection). In this case, *method injection* via object initialization\n\nThe code below stores a method which matches the qualified symbol name of the wrapper method, using it to perform the search. In order to simplify the `SearchResultsTableViewDataSource` interface, the wrapper's search method is assigned using a [default parameter value](https://docs.swift.org/swift-book/LanguageGuide/Functions.html#ID169).\n\n```swift\nfinal class SearchResultsTableViewDataSource: NSObject,\n                                              UITableViewDataSource {\n    typealias SearcherCompletion\n        = (Result<[String], Error>) -> Void\n    typealias Searcher\n        = (String, @escaping SearcherCompletion) -> Void\n\n    private let tableView: UITableView\n    private var results: [String] = []\n    private var searcher: Searcher\n\n    init(\n        tableView: UITableView,\n        searcher: @escaping Searcher = APIWrapper.search(query:completion:)\n    ) {\n        self.tableView = tableView\n        self.searcher = searcher\n    }\n\n    func fetchSearchResuls(query: String) {\n        searcher(query) { [weak self] result in\n            switch result {\n            case .success(let results): self?.results = results\n            case .failure: self?.results = []\n            }\n            self?.tableView.reloadData()\n        }\n    }\n\n    // ... UITableViewDataSource methods ...\n}\n```\n\n### **Testing with Dependency Injection**\n\nFinally, testing becomes trivial. The injected method is used to capture the query term and the completion block passed to the API wrapper. Once captured, these can be used to verify expectations.\n\n```swift\nfinal class SearchResultsTableViewDataSourceTests: XCTestCase {\n    var tableView: UITableView!\n    var dataSource: SearchResultsTableViewDataSource?\n    var lastSearchQuery: String?\n    var lastSearchCompletion:\n        SearchResultsTableViewDataSource.SearcherCompletion?\n\n    override func setUp() {\n        super.setUp()\n\n        tableView = UITableView()\n\n        dataSource = SearchResultsTableViewDataSource(\n            tableView: tableView\n        ) { query, completion in\n            self.lastSearchQuery = query\n            self.lastSearchCompletion = completion\n        }\n    }\n\n    func testFetchSearchResultsQuery() {\n        // When the method is called\n        dataSource?.fetchSearchResuls(query: \"Mocked Search Query\")\n\n        XCTAssertEqual(\n            lastSearchQuery,\n            \"Mocked Search Query\",\n            \"It calls the API wrapper with the correct search query\"\n        )\n    }\n\n    func testFetchSearchResultsWithoutResults() {\n        // When the method is called\n        dataSource?.fetchSearchResuls(query: \"Mocked Search Query\")\n\n        // And the API wrapper completion block is called with an empty array\n        lastSearchCompletion?(.success([]))\n\n        XCTAssertEqual(\n            dataSource?.tableView(tableView, numberOfRowsInSection: 0),\n            0,\n            \"It empties the table view\"\n        )\n    }\n\n    func testFetchSearchResultsWithResults() {\n        // When the method is called\n        dataSource?.fetchSearchResuls(query: \"Mocked Search Query\")\n\n        // And the API wrapper completion block is called with results\n        lastSearchCompletion?(.success([\"result 1\", \"result 2\"]))\n\n        XCTAssertEqual(\n            dataSource?.tableView(tableView, numberOfRowsInSection: 0),\n            2,\n            \"It adds the correct number of results to the table view\"\n        )\n\n        XCTAssertEqual(\n            dataSource?.tableView(\n                tableView,\n                cellForRowAt: IndexPath(row: 0, section: 0)\n            ).textLabel?.text,\n            \"result 1\",\n            \"It configures the first cell\"\n        )\n\n        XCTAssertEqual(\n            dataSource?.tableView(\n                tableView,\n                cellForRowAt: IndexPath(row: 1, section: 0)\n            ).textLabel?.text,\n            \"result 2\",\n            \"It configures the second cell\"\n        )\n    }\n\n    func testFetchSearchResultsWithError() {\n        // When the method is called\n        dataSource?.fetchSearchResuls(query: \"Mocked Search Query\")\n\n        // And the API wrapper completion block is called with an error\n        enum MockError: Error { case someGenericError }\n        lastSearchCompletion?(.failure(MockError.someGenericError))\n\n        XCTAssertEqual(\n            dataSource?.tableView(tableView, numberOfRowsInSection: 0),\n            0,\n            \"It empties the table view\"\n        )\n    }\n}\n```\n\nMore importantly, not only does this method work with type methods but also with *free functions*, such as `SecItemAdd(_:_:)` used to [add items to the Keychain](https://developer.apple.com/documentation/security/1401659-secitemadd).\n",
				"date_published": "2020-05-21T13:00:00+02:00",
				"url": "https://otavio.cc/2022/02/06/how-to-replace.html",
				"tags": ["programming"]
			},
			{
				"id": "http://otaviocc.micro.blog/2022/02/06/map-filter-sort.html",
				"title": "Map, Filter, Sort, and Reduce in Objective-C",
				"content_html": "<p>I strongly believe that the best way to learn something new is by experimenting and practicing it.</p>\n<p>A few months ago I was studying <em>Functional Programming in Swift</em>. Swift is a modern, powerful, and safe language. Its syntax is so simple and elegante that it works as an invitation to dive into the Functional Programming world.</p>\n<p>After practicing Functional Programming in Swift for a few weeks, I decided to try something a little bit different. I decided it was time to experiment with <em>curried functions</em>, <em>map</em>, <em>filter</em>, <em>sort</em>, and <em>reduce</em> in Objective-C.</p>\n<p>Swift collections implement <em>map</em>, <em>sort</em>, <em>filter</em>, and <em>reduce</em>, so the first step on my experiment was to reimplement these in a <code>NSArray</code> category, trying to match the method signature that Swift implements.</p>\n<ul>\n<li><strong>Map</strong>: given a <em>transform operation</em>, it returns a new <code>NSArray</code> where all its elements are transformed according to the operation. The <em>transform operation</em> takes an object and returns another object (that might be of a different type of the original object).</li>\n<li><strong>Filter</strong>: given a <em>condition operation</em>, it returns a new <code>NSArray</code> where all its elements satisfy the condition. The <em>condition operation</em> takes an object and returns a boolean.</li>\n<li><strong>Sort</strong>: given a <em>sort condition</em>, it returns a new <code>NSArray</code> where all its elements are sorted according to the condition. The <em>sort condition</em> takes two objects and returns a boolean.</li>\n<li><strong>Reduce</strong>: given a <em>combine operation</em>, it returns a recombined object by recursively processing its constituent parts. The <em>combine operation</em> takes the initial state and an object and returns a recombined object which is of the same type of the initial state.</li>\n</ul>\n<p>The <code>NSArray</code> category ended up with the following interface:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-objc\" data-lang=\"objc\"><span style=\"color:#a90d91\">typedef</span> <span style=\"color:#000\">id</span>(<span style=\"color:#000\">^</span><span style=\"color:#000\">Transform</span>)(<span style=\"color:#a90d91\">id</span>);\n<span style=\"color:#a90d91\">typedef</span> <span style=\"color:#000\">BOOL</span>(<span style=\"color:#000\">^</span><span style=\"color:#000\">Condition</span>)(<span style=\"color:#a90d91\">id</span>);\n<span style=\"color:#a90d91\">typedef</span> <span style=\"color:#000\">BOOL</span>(<span style=\"color:#000\">^</span><span style=\"color:#000\">SortCondition</span>)(<span style=\"color:#a90d91\">id</span>, <span style=\"color:#a90d91\">id</span>);\n<span style=\"color:#a90d91\">typedef</span> <span style=\"color:#000\">id</span>(<span style=\"color:#000\">^</span><span style=\"color:#000\">Combine</span>)(<span style=\"color:#a90d91\">id</span>, <span style=\"color:#a90d91\">id</span>);\n\n[@<span style=\"color:#000\">interface</span>](<span style=\"color:#000\">https</span>:<span style=\"color:#177500\">//micro.blog/interface) NSArray (MFSR)\n</span><span style=\"color:#177500\"></span>\n<span style=\"color:#000\">-</span> (<span style=\"color:#000\">NSArray</span> <span style=\"color:#000\">*</span>)<span style=\"color:#000\">map</span>:(<span style=\"color:#000\">Transform</span>)<span style=\"color:#000\">transform</span>;\n- (<span style=\"color:#000\">NSArray</span> <span style=\"color:#000\">*</span>)<span style=\"color:#000\">filter:</span>(<span style=\"color:#000\">Condition</span>)<span style=\"color:#000\">condition</span>;\n- (<span style=\"color:#000\">NSArray</span> <span style=\"color:#000\">*</span>)<span style=\"color:#000\">sort:</span>(<span style=\"color:#000\">SortCondition</span>)<span style=\"color:#000\">isOrderedBefore</span>;\n- (<span style=\"color:#a90d91\">id</span>)<span style=\"color:#000\">reduce:</span>(<span style=\"color:#a90d91\">id</span>)<span style=\"color:#000\">initial</span> <span style=\"color:#000\">andCombine:</span>(<span style=\"color:#000\">Combine</span>)<span style=\"color:#000\">combine</span>;\n\n<span style=\"color:#a90d91\">@end</span>\n</code></pre></div><p>To test the interface above and its implementation, I started with a immutable array of movies‚Ää‚Äî‚ÄäJames Bond movies‚Ää‚Äî‚Ääloaded from a <em>plist</em> file.</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-objc\" data-lang=\"objc\"><span style=\"color:#000\">NSArray</span><span style=\"color:#000\">&lt;</span><span style=\"color:#000\">Movie</span> <span style=\"color:#000\">*&gt;</span> <span style=\"color:#000\">*</span><span style=\"color:#000\">movies</span> <span style=\"color:#000\">=</span> [[<span style=\"color:#000\">NSBundle</span> <span style=\"color:#000\">mainBundle</span>] <span style=\"color:#000\">moviesFromPlist</span>];\n</code></pre></div><p>Where each movie contains a title, the actor‚Äôs name who played Bond, and some additional information about about the flick. The movie interface is defined as:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-objc\" data-lang=\"objc\"><span style=\"color:#a90d91\">@interface</span> <span style=\"color:#3f6e75\">Movie</span> : <span style=\"color:#3f6e75\">NSObject</span>\n\n<span style=\"color:#a90d91\">@property</span> (<span style=\"color:#a90d91\">nonatomic</span>, <span style=\"color:#a90d91\">readonly</span>) <span style=\"color:#000\">NSString</span> <span style=\"color:#000\">*</span><span style=\"color:#000\">title</span>;\n<span style=\"color:#a90d91\">@property</span> (<span style=\"color:#a90d91\">nonatomic</span>, <span style=\"color:#a90d91\">readonly</span>) <span style=\"color:#000\">NSString</span> <span style=\"color:#000\">*</span><span style=\"color:#000\">actor</span>;\n<span style=\"color:#a90d91\">@property</span> (<span style=\"color:#a90d91\">nonatomic</span>, <span style=\"color:#a90d91\">readonly</span>) <span style=\"color:#000\">NSInteger</span> <span style=\"color:#000\">year</span>;\n<span style=\"color:#a90d91\">@property</span> (<span style=\"color:#a90d91\">nonatomic</span>, <span style=\"color:#a90d91\">readonly</span>) <span style=\"color:#000\">CGFloat</span> <span style=\"color:#000\">boxOffice</span>;\n<span style=\"color:#a90d91\">@property</span> (<span style=\"color:#a90d91\">nonatomic</span>, <span style=\"color:#a90d91\">readonly</span>) <span style=\"color:#000\">CGFloat</span> <span style=\"color:#000\">budget</span>;\n<span style=\"color:#a90d91\">@property</span> (<span style=\"color:#a90d91\">nonatomic</span>, <span style=\"color:#a90d91\">readonly</span>) <span style=\"color:#000\">CGFloat</span> <span style=\"color:#000\">tomatometer</span>;\n\n<span style=\"color:#a90d91\">@end</span>\n</code></pre></div><p><em>Sorting</em> the array of movies requires a <em>sort condition</em> that takes two movies and returns a boolean that represents the relationship between them. So, for sorting all the British Secret Service agent movies by budget:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-objc\" data-lang=\"objc\"><span style=\"color:#a90d91\">BOOL</span>(<span style=\"color:#000\">^</span><span style=\"color:#000\">byBudget</span>)(<span style=\"color:#000\">Movie</span> <span style=\"color:#000\">*</span>, <span style=\"color:#000\">Movie</span> <span style=\"color:#000\">*</span>) <span style=\"color:#000\">=</span> <span style=\"color:#000\">^</span><span style=\"color:#a90d91\">BOOL</span>(<span style=\"color:#000\">Movie</span> <span style=\"color:#000\">*</span><span style=\"color:#000\">a</span>, <span style=\"color:#000\">Movie</span> <span style=\"color:#000\">*</span><span style=\"color:#000\">b</span>) {\n    <span style=\"color:#a90d91\">return</span> <span style=\"color:#000\">a</span>.<span style=\"color:#000\">budget</span> <span style=\"color:#000\">&gt;</span> <span style=\"color:#000\">b</span>.<span style=\"color:#000\">budget</span>;\n};\n\n<span style=\"color:#000\">NSArray</span><span style=\"color:#000\">&lt;</span><span style=\"color:#000\">Movie</span> <span style=\"color:#000\">*&gt;</span> <span style=\"color:#000\">*</span><span style=\"color:#000\">moviesByBudget</span> <span style=\"color:#000\">=</span> [<span style=\"color:#000\">movies</span> <span style=\"color:#000\">sort</span>:<span style=\"color:#000\">byBudget</span>];\n</code></pre></div><p>Simple.</p>\n<p>For <em>filtering</em>, the method requires a movie and returns <em>true</em> when the movie matches the condition and <em>false</em> otherwise. Below, a simple way to create an immutable array containing the Sean Connery movies.</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-objc\" data-lang=\"objc\"><span style=\"color:#a90d91\">BOOL</span>(<span style=\"color:#000\">^</span><span style=\"color:#000\">isConnery</span>)(<span style=\"color:#000\">Movie</span> <span style=\"color:#000\">*</span>) <span style=\"color:#000\">=</span> <span style=\"color:#000\">^</span><span style=\"color:#a90d91\">BOOL</span>(<span style=\"color:#000\">Movie</span> <span style=\"color:#000\">*</span><span style=\"color:#000\">a</span>) {\n    <span style=\"color:#a90d91\">return</span> [<span style=\"color:#000\">a</span>.<span style=\"color:#000\">actor</span> <span style=\"color:#000\">isEqual</span>:<span style=\"color:#c41a16\">@&#34;Sean Connery&#34;</span>];\n};\n\n<span style=\"color:#000\">NSArray</span><span style=\"color:#000\">&lt;</span><span style=\"color:#000\">Movie</span> <span style=\"color:#000\">*&gt;</span> <span style=\"color:#000\">*</span><span style=\"color:#000\">conneryMovies</span> <span style=\"color:#000\">=</span> [<span style=\"color:#000\">movies</span> <span style=\"color:#000\">filter</span>:<span style=\"color:#000\">isConnery</span>];\n</code></pre></div><p>But here is the tricky part. To filter movies played by other actors, more blocks like the one above would be required. The <em>functional</em> way to address this is using curried functions‚Ää‚Äî‚Ääpopular technique in Swift (and in other Functional Programming languages).</p>\n<p>Since <em>filter</em> expects a block that takes a movie and returns a boolean, another function is required, where its output is a function matching this signature.</p>\n<p>The new function takes a string (actor‚Äôs name) and returns a function that takes a movie and returns a boolean.</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-objc\" data-lang=\"objc\"><span style=\"color:#a90d91\">typedef</span> <span style=\"color:#000\">BOOL</span>(<span style=\"color:#000\">^</span><span style=\"color:#000\">FuncMovieToBool</span>)(<span style=\"color:#000\">Movie</span> <span style=\"color:#000\">*</span>);\n\n<span style=\"color:#000\">FuncMovieToBool</span>(<span style=\"color:#000\">^</span><span style=\"color:#000\">isActor</span>)(<span style=\"color:#000\">NSString</span> <span style=\"color:#000\">*</span>) <span style=\"color:#000\">=</span> <span style=\"color:#000\">^</span><span style=\"color:#000\">FuncMovieToBool</span>(<span style=\"color:#000\">NSString</span> <span style=\"color:#000\">*</span><span style=\"color:#000\">actor</span>) {\n    <span style=\"color:#a90d91\">return</span> <span style=\"color:#000\">^</span><span style=\"color:#a90d91\">BOOL</span>(<span style=\"color:#000\">Movie</span> <span style=\"color:#000\">*</span><span style=\"color:#000\">movie</span>) {\n        <span style=\"color:#a90d91\">return</span> [<span style=\"color:#000\">movie</span>.<span style=\"color:#000\">actor</span> <span style=\"color:#000\">isEqual</span>:<span style=\"color:#000\">actor</span>];\n    };\n};\n\n<span style=\"color:#000\">NSArray</span><span style=\"color:#000\">&lt;</span><span style=\"color:#000\">Movie</span> <span style=\"color:#000\">*&gt;</span> <span style=\"color:#000\">*</span><span style=\"color:#000\">actorMovies</span> <span style=\"color:#000\">=</span> [<span style=\"color:#000\">movies</span> <span style=\"color:#000\">filter</span>:<span style=\"color:#000\">isActor</span>(<span style=\"color:#c41a16\">@&#34;Daniel Craig&#34;</span>)];\n</code></pre></div><p>Without any changes to the <em>filter</em> method signature or implementation, it‚Äôs possible to filter the array of movies to get a list of movies played by any actor on the big screen.</p>\n<p>Finally, it‚Äôs possible to combine all these functions to achieve the desired result. Let‚Äôs say I want the movies were Pierce Brosnan played James Bond, <em>sorted</em> by ratings and <em>reduced</em> to a list.</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-objc\" data-lang=\"objc\"><span style=\"color:#000\">NSArray</span><span style=\"color:#000\">&lt;</span><span style=\"color:#000\">Movie</span> <span style=\"color:#000\">*&gt;</span> <span style=\"color:#000\">*</span><span style=\"color:#000\">moviesByRatings</span>\n    <span style=\"color:#000\">=</span> [[<span style=\"color:#000\">movies</span> <span style=\"color:#000\">filter</span>:<span style=\"color:#000\">isActor</span>(<span style=\"color:#c41a16\">@&#34;Pierce Brosnan&#34;</span>)]<span style=\"color:#000\">sort</span>:<span style=\"color:#000\">byRatings</span>];\n\n<span style=\"color:#000\">NSString</span> <span style=\"color:#000\">*</span><span style=\"color:#000\">description</span>\n    <span style=\"color:#000\">=</span> [<span style=\"color:#000\">moviesByRatings</span> <span style=\"color:#000\">reduce</span>:<span style=\"color:#c41a16\">@&#34;Brosnan movies sorted by ratings:&#34;</span>\n                   <span style=\"color:#000\">andCombine</span>:<span style=\"color:#000\">^</span><span style=\"color:#000\">NSString</span> <span style=\"color:#000\">*</span>(<span style=\"color:#000\">NSString</span> <span style=\"color:#000\">*</span><span style=\"color:#000\">initial</span>, <span style=\"color:#000\">Movie</span> <span style=\"color:#000\">*</span><span style=\"color:#000\">movie</span>) {\n        <span style=\"color:#a90d91\">return</span> [<span style=\"color:#000\">NSString</span> <span style=\"color:#000\">stringWithFormat</span>:<span style=\"color:#c41a16\">@&#34;%@</span><span style=\"color:#c41a16\">\\n</span><span style=\"color:#c41a16\">* %@ (Tomatometer: %@)&#34;</span>,\n                                          <span style=\"color:#000\">initial</span>,\n                                          <span style=\"color:#000\">movie</span>.<span style=\"color:#000\">title</span>,\n                                          <span style=\"color:#1c01ce\">@(</span><span style=\"color:#000\">movie</span>.<span style=\"color:#000\">tomatometer</span><span style=\"color:#1c01ce\">)</span>];\n    }];\n</code></pre></div><p>Voil√†:</p>\n<pre tabindex=\"0\"><code>Brosnan movies sorted by ratings:\n* GoldenEye (Tomatometer: 82)\n* Die Another Day (Tomatometer: 57)\n* Tomorrow Never Dies (Tomatometer: 57)\n* The World Is Not Enough (Tomatometer: 51)\n</code></pre><p>But putting all the fun and excitement aside, would I use these methods on an Objective-C project? Probably not‚Ää‚Äî‚Ää<code>NSArray</code> already implements methods for sorting and filtering arrays using <code>NSPredicate</code>.</p>\n<p>My point here was to experiment and practice <em>map</em>, <em>filter</em>, <em>sort</em>, <em>reduce</em>, and <em>curried functions</em>. Programming requires practice. And practicing these techniques and methods (and reimplementing them) in Objective-C improved the way I use them in Swift.</p>\n",
				"content_text": "I strongly believe that the best way to learn something new is by experimenting and practicing it.\n\nA few months ago I was studying *Functional Programming in Swift*. Swift is a modern, powerful, and safe language. Its syntax is so simple and elegante that it works as an invitation to dive into the Functional Programming world.\n\nAfter practicing Functional Programming in Swift for a few weeks, I decided to try something a little bit different. I decided it was time to experiment with *curried functions*, *map*, *filter*, *sort*, and *reduce* in Objective-C.\n\nSwift collections implement *map*, *sort*, *filter*, and *reduce*, so the first step on my experiment was to reimplement these in a `NSArray` category, trying to match the method signature that Swift implements.\n\n* **Map**: given a *transform operation*, it returns a new `NSArray` where all its elements are transformed according to the operation. The *transform operation* takes an object and returns another object (that might be of a different type of the original object).\n* **Filter**: given a *condition operation*, it returns a new `NSArray` where all its elements satisfy the condition. The *condition operation* takes an object and returns a boolean.\n* **Sort**: given a *sort condition*, it returns a new `NSArray` where all its elements are sorted according to the condition. The *sort condition* takes two objects and returns a boolean.\n* **Reduce**: given a *combine operation*, it returns a recombined object by recursively processing its constituent parts. The *combine operation* takes the initial state and an object and returns a recombined object which is of the same type of the initial state.\n\nThe `NSArray` category ended up with the following interface:\n\n```objc\ntypedef id(^Transform)(id);\ntypedef BOOL(^Condition)(id);\ntypedef BOOL(^SortCondition)(id, id);\ntypedef id(^Combine)(id, id);\n\n[@interface](https://micro.blog/interface) NSArray (MFSR)\n\n- (NSArray *)map:(Transform)transform;\n- (NSArray *)filter:(Condition)condition;\n- (NSArray *)sort:(SortCondition)isOrderedBefore;\n- (id)reduce:(id)initial andCombine:(Combine)combine;\n\n@end\n```\n\nTo test the interface above and its implementation, I started with a immutable array of movies‚Ää‚Äî‚ÄäJames Bond movies‚Ää‚Äî‚Ääloaded from a *plist* file.\n\n```objc\nNSArray<Movie *> *movies = [[NSBundle mainBundle] moviesFromPlist];\n```\n\nWhere each movie contains a title, the actor‚Äôs name who played Bond, and some additional information about about the flick. The movie interface is defined as:\n\n```objc\n@interface Movie : NSObject\n\n@property (nonatomic, readonly) NSString *title;\n@property (nonatomic, readonly) NSString *actor;\n@property (nonatomic, readonly) NSInteger year;\n@property (nonatomic, readonly) CGFloat boxOffice;\n@property (nonatomic, readonly) CGFloat budget;\n@property (nonatomic, readonly) CGFloat tomatometer;\n\n@end\n```\n\n*Sorting* the array of movies requires a *sort condition* that takes two movies and returns a boolean that represents the relationship between them. So, for sorting all the British Secret Service agent movies by budget:\n\n```objc\nBOOL(^byBudget)(Movie *, Movie *) = ^BOOL(Movie *a, Movie *b) {\n    return a.budget > b.budget;\n};\n\nNSArray<Movie *> *moviesByBudget = [movies sort:byBudget];\n```\n\nSimple.\n\nFor *filtering*, the method requires a movie and returns *true* when the movie matches the condition and *false* otherwise. Below, a simple way to create an immutable array containing the Sean Connery movies.\n\n```objc\nBOOL(^isConnery)(Movie *) = ^BOOL(Movie *a) {\n    return [a.actor isEqual:@\"Sean Connery\"];\n};\n\nNSArray<Movie *> *conneryMovies = [movies filter:isConnery];\n```\n\nBut here is the tricky part. To filter movies played by other actors, more blocks like the one above would be required. The *functional* way to address this is using curried functions‚Ää‚Äî‚Ääpopular technique in Swift (and in other Functional Programming languages).\n\nSince *filter* expects a block that takes a movie and returns a boolean, another function is required, where its output is a function matching this signature.\n\nThe new function takes a string (actor‚Äôs name) and returns a function that takes a movie and returns a boolean.\n\n```objc\ntypedef BOOL(^FuncMovieToBool)(Movie *);\n\nFuncMovieToBool(^isActor)(NSString *) = ^FuncMovieToBool(NSString *actor) {\n    return ^BOOL(Movie *movie) {\n        return [movie.actor isEqual:actor];\n    };\n};\n\nNSArray<Movie *> *actorMovies = [movies filter:isActor(@\"Daniel Craig\")];\n```\n\nWithout any changes to the *filter* method signature or implementation, it‚Äôs possible to filter the array of movies to get a list of movies played by any actor on the big screen.\n\nFinally, it‚Äôs possible to combine all these functions to achieve the desired result. Let‚Äôs say I want the movies were Pierce Brosnan played James Bond, *sorted* by ratings and *reduced* to a list.\n\n```objc\nNSArray<Movie *> *moviesByRatings\n    = [[movies filter:isActor(@\"Pierce Brosnan\")]sort:byRatings];\n\nNSString *description\n    = [moviesByRatings reduce:@\"Brosnan movies sorted by ratings:\"\n                   andCombine:^NSString *(NSString *initial, Movie *movie) {\n        return [NSString stringWithFormat:@\"%@\\n* %@ (Tomatometer: %@)\",\n                                          initial,\n                                          movie.title,\n                                          @(movie.tomatometer)];\n    }];\n```\n\nVoil√†:\n\n```\nBrosnan movies sorted by ratings:\n* GoldenEye (Tomatometer: 82)\n* Die Another Day (Tomatometer: 57)\n* Tomorrow Never Dies (Tomatometer: 57)\n* The World Is Not Enough (Tomatometer: 51)\n```\n\nBut putting all the fun and excitement aside, would I use these methods on an Objective-C project? Probably not‚Ää‚Äî‚Ää`NSArray` already implements methods for sorting and filtering arrays using `NSPredicate`.\n\nMy point here was to experiment and practice *map*, *filter*, *sort*, *reduce*, and *curried functions*. Programming requires practice. And practicing these techniques and methods (and reimplementing them) in Objective-C improved the way I use them in Swift.\n",
				"date_published": "2016-04-05T13:00:00+02:00",
				"url": "https://otavio.cc/2022/02/06/map-filter-sort.html",
				"tags": ["programming"]
			},
			{
				"id": "http://otaviocc.micro.blog/2022/02/06/curried-function-in.html",
				"title": "Curried Function in Objective-C",
				"content_html": "<p><a href=\"https://en.wikipedia.org/wiki/Currying\">Function Currying</a> and <em>uncurrying</em> have been extensively discussed since Apple introduced Swift in 2014. I won‚Äôt extend myself on this topic because there are some great resources about it on the Internet.</p>\n<p>But, shortly, what is currying? It‚Äôs a technique that transforms a function that takes several arguments into a sequence of functions, each with a single argument. The result is a chain of functions returning functions. It‚Äôs beautiful, it‚Äôs mathematics!</p>\n<p>Below, a simple example in Swift:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#a90d91\">func</span> <span style=\"color:#000\">add</span>(<span style=\"color:#a90d91\">_</span> <span style=\"color:#000\">a</span>: <span style=\"color:#a90d91\">Int</span>) -&gt; (<span style=\"color:#a90d91\">Int</span>) -&gt; (<span style=\"color:#a90d91\">Int</span>) -&gt; <span style=\"color:#a90d91\">Int</span> {\n    { <span style=\"color:#000\">b</span> <span style=\"color:#a90d91\">in</span> { <span style=\"color:#000\">c</span> <span style=\"color:#a90d91\">in</span> <span style=\"color:#000\">a</span> <span style=\"color:#000\">+</span> <span style=\"color:#000\">b</span> <span style=\"color:#000\">+</span> <span style=\"color:#000\">c</span> } }\n}\n\n<span style=\"color:#a90d91\">let</span> <span style=\"color:#000\">addTwo</span> = <span style=\"color:#000\">add</span>(<span style=\"color:#1c01ce\">2</span>)               <span style=\"color:#177500\">// Int -&gt; Int -&gt; Int</span>\n<span style=\"color:#a90d91\">let</span> <span style=\"color:#000\">addFive</span> = <span style=\"color:#000\">addTwo</span>(<span style=\"color:#1c01ce\">3</span>)           <span style=\"color:#177500\">// Int -&gt; Int</span>\n<span style=\"color:#a90d91\">let</span> <span style=\"color:#000\">result</span> = <span style=\"color:#000\">addFive</span>(<span style=\"color:#1c01ce\">4</span>)           <span style=\"color:#177500\">// 9</span>\n\n<span style=\"color:#5b269a\">print</span>(<span style=\"color:#c41a16\">&#34;result = </span><span style=\"color:#c41a16\">\\(</span><span style=\"color:#000\">result</span><span style=\"color:#c41a16\">)</span><span style=\"color:#c41a16\">&#34;</span>)       <span style=\"color:#177500\">// result = 9</span>\n</code></pre></div><p>and the same example in Objective-C:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-objc\" data-lang=\"objc\"><span style=\"color:#a90d91\">typedef</span> <span style=\"color:#000\">NSInteger</span>(<span style=\"color:#000\">^</span><span style=\"color:#000\">FuncInt2Int</span>)(<span style=\"color:#000\">NSInteger</span>);\n<span style=\"color:#a90d91\">typedef</span> <span style=\"color:#000\">FuncInt2Int</span>(<span style=\"color:#000\">^</span><span style=\"color:#000\">FuncInt2Int2Int</span>)(<span style=\"color:#000\">NSInteger</span>);\n\n<span style=\"color:#000\">FuncInt2Int2Int</span>(<span style=\"color:#000\">^</span><span style=\"color:#000\">add</span>)(<span style=\"color:#000\">NSInteger</span>) <span style=\"color:#000\">=</span> <span style=\"color:#000\">^</span><span style=\"color:#000\">FuncInt2Int2Int</span>(<span style=\"color:#000\">NSInteger</span> <span style=\"color:#000\">a</span>) {\n    <span style=\"color:#a90d91\">return</span> <span style=\"color:#000\">^</span><span style=\"color:#000\">FuncInt2Int</span>(<span style=\"color:#000\">NSInteger</span> <span style=\"color:#000\">b</span>) {\n        <span style=\"color:#a90d91\">return</span> <span style=\"color:#000\">^</span><span style=\"color:#000\">NSInteger</span>(<span style=\"color:#000\">NSInteger</span> <span style=\"color:#000\">c</span>) {\n            <span style=\"color:#a90d91\">return</span> <span style=\"color:#000\">a</span> <span style=\"color:#000\">+</span> <span style=\"color:#000\">b</span> <span style=\"color:#000\">+</span> <span style=\"color:#000\">c</span>;\n        };\n    };\n};\n\n<span style=\"color:#000\">FuncInt2Int2Int</span> <span style=\"color:#000\">addTwo</span> <span style=\"color:#000\">=</span> <span style=\"color:#000\">add</span>(<span style=\"color:#1c01ce\">2</span>);        <span style=\"color:#177500\">// Int -&gt; Int -&gt; Int\n</span><span style=\"color:#177500\"></span><span style=\"color:#000\">FuncInt2Int</span> <span style=\"color:#000\">addFive</span> <span style=\"color:#000\">=</span> <span style=\"color:#000\">addTwo</span>(<span style=\"color:#1c01ce\">3</span>);        <span style=\"color:#177500\">// Int -&gt; Int\n</span><span style=\"color:#177500\"></span><span style=\"color:#000\">NSInteger</span> <span style=\"color:#000\">result</span> <span style=\"color:#000\">=</span> <span style=\"color:#000\">addFive</span>(<span style=\"color:#1c01ce\">4</span>);          <span style=\"color:#177500\">// 9\n</span><span style=\"color:#177500\"></span>\n<span style=\"color:#000\">NSLog</span>(<span style=\"color:#c41a16\">@&#34;result = %ld&#34;</span>, <span style=\"color:#000\">result</span>);         <span style=\"color:#177500\">// result = 9\n</span></code></pre></div><p>The Swift version is minimal and elegant. But the Objective-C one has its charm, doesn‚Äôt it?</p>\n",
				"content_text": "[Function Currying](https://en.wikipedia.org/wiki/Currying) and *uncurrying* have been extensively discussed since Apple introduced Swift in 2014. I won‚Äôt extend myself on this topic because there are some great resources about it on the Internet.\n\nBut, shortly, what is currying? It‚Äôs a technique that transforms a function that takes several arguments into a sequence of functions, each with a single argument. The result is a chain of functions returning functions. It‚Äôs beautiful, it‚Äôs mathematics!\n\nBelow, a simple example in Swift:\n\n```swift\nfunc add(_ a: Int) -> (Int) -> (Int) -> Int {\n    { b in { c in a + b + c } }\n}\n\nlet addTwo = add(2)               // Int -> Int -> Int\nlet addFive = addTwo(3)           // Int -> Int\nlet result = addFive(4)           // 9\n\nprint(\"result = \\(result)\")       // result = 9\n```\n\nand the same example in Objective-C:\n\n```objc\ntypedef NSInteger(^FuncInt2Int)(NSInteger);\ntypedef FuncInt2Int(^FuncInt2Int2Int)(NSInteger);\n\nFuncInt2Int2Int(^add)(NSInteger) = ^FuncInt2Int2Int(NSInteger a) {\n    return ^FuncInt2Int(NSInteger b) {\n        return ^NSInteger(NSInteger c) {\n            return a + b + c;\n        };\n    };\n};\n\nFuncInt2Int2Int addTwo = add(2);        // Int -> Int -> Int\nFuncInt2Int addFive = addTwo(3);        // Int -> Int\nNSInteger result = addFive(4);          // 9\n\nNSLog(@\"result = %ld\", result);         // result = 9\n```\n\nThe Swift version is minimal and elegant. But the Objective-C one has its charm, doesn‚Äôt it?\n",
				"date_published": "2016-04-04T13:00:00+02:00",
				"url": "https://otavio.cc/2022/02/06/curried-function-in.html",
				"tags": ["programming"]
			}
	]
}
